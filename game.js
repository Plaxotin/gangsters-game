// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
class Game {
    constructor() {
        this.player = null;
        this.map = null;
        this.clans = new Map();
        this.achievements = new Map();
        this.events = [];
        this.isInitialized = false;
        
        this.init();
    }

    async init() {
        try {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞
            this.player = new Player();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            this.initAchievements();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–Ω—ã
            this.initClans();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
            this.initEvents();
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç API
            await this.waitForYandexMaps();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            this.map = new GameMap();
            
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
            await this.waitForMapInit();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            this.startGameSystems();
            
            this.isInitialized = true;
            console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            this.showMainMenu();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã: ' + error.message, 'error');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.showMainMenu();
        }
    }

    async waitForYandexMaps() {
        return new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç API'));
            }, 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

            const checkAPI = () => {
                if (typeof ymaps !== 'undefined' && ymaps.ready) {
                    ymaps.ready(() => {
                        clearTimeout(timeout);
                        resolve();
                    });
                } else if (typeof ymaps !== 'undefined' && ymaps.Map) {
                    clearTimeout(timeout);
                    resolve();
                } else {
                    setTimeout(checkAPI, 100);
                }
            };
            
            checkAPI();
        });
    }

    async waitForMapInit() {
        return new Promise((resolve) => {
            const checkMap = () => {
                if (this.map && this.map.map) {
                    resolve();
                } else {
                    setTimeout(checkMap, 100);
                }
            };
            checkMap();
        });
    }

    initAchievements() {
        const achievements = [
            {
                id: 'first_capture',
                name: '–ü–µ—Ä–≤—ã–π –∑–∞—Ö–≤–∞—Ç',
                description: '–ó–∞—Ö–≤–∞—Ç–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ',
                reward: 100,
                icon: 'üéØ'
            },
            {
                id: 'territory_owner',
                name: '–í–ª–∞–¥–µ–ª–µ—Ü —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
                description: '–ó–∞—Ö–≤–∞—Ç–∏—Ç–µ 10 –∑–∞–≤–µ–¥–µ–Ω–∏–π',
                reward: 500,
                icon: 'üè¢'
            },
            {
                id: 'district_controller',
                name: '–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Ä–∞–π–æ–Ω–∞',
                description: '–ó–∞—Ö–≤–∞—Ç–∏—Ç–µ 50 –∑–∞–≤–µ–¥–µ–Ω–∏–π',
                reward: 2000,
                icon: 'üëë'
            },
            {
                id: 'first_duel',
                name: '–ü–µ—Ä–≤–∞—è –¥—É—ç–ª—å',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –¥—É—ç–ª—å',
                reward: 200,
                icon: '‚öîÔ∏è'
            },
            {
                id: 'duel_master',
                name: '–ú–∞—Å—Ç–µ—Ä –¥—É—ç–ª–µ–π',
                description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –¥—É—ç–ª–µ–π',
                reward: 1000,
                icon: 'üèÜ'
            },
            {
                id: 'money_maker',
                name: '–î–µ–Ω–µ–∂–Ω—ã–π –º–µ—à–æ–∫',
                description: '–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ $10,000',
                reward: 500,
                icon: 'üí∞'
            },
            {
                id: 'clan_member',
                name: '–ß–ª–µ–Ω –∫–ª–∞–Ω–∞',
                description: '–í—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–ª–∞–Ω',
                reward: 300,
                icon: 'üë•'
            }
        ];

        achievements.forEach(achievement => {
            this.achievements.set(achievement.id, achievement);
        });
    }

    initClans() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∞–Ω–æ–≤
        const testClans = [
            {
                id: 'clan_1',
                name: '–ö—Ä–∞—Å–Ω—ã–µ –î—Ä–∞–∫–æ–Ω—ã',
                members: ['player_1', 'player_2', 'player_3'],
                leader: 'player_1',
                created: Date.now() - 86400000, // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
                territory: ['venue_1', 'venue_2', 'venue_3']
            },
            {
                id: 'clan_2',
                name: '–°–∏–Ω–∏–µ –¢–∏–≥—Ä—ã',
                members: ['player_4', 'player_5'],
                leader: 'player_4',
                created: Date.now() - 172800000, // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
                territory: ['venue_4', 'venue_5']
            }
        ];

        testClans.forEach(clan => {
            this.clans.set(clan.id, clan);
        });
    }

    initEvents() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
        this.events = [];
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π
        this.startEventGenerator();
    }

    startEventGenerator() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.generateRandomEvent();
        }, 30 * 60 * 1000);
    }

    generateRandomEvent() {
        const eventTypes = ['police_raid', 'golden_district', 'seasonal_bonus'];
        const randomType = eventTypes[Math.floor(Math.random() * eventTypes.length)];
        
        switch (randomType) {
            case 'police_raid':
                this.triggerPoliceRaid();
                break;
            case 'golden_district':
                this.triggerGoldenDistrict();
                break;
            case 'seasonal_bonus':
                this.triggerSeasonalBonus();
                break;
        }
    }

    triggerPoliceRaid() {
        // –†–µ–π–¥ –ø–æ–ª–∏—Ü–∏–∏ - –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ 3 —á–∞—Å–∞
        const venues = Array.from(this.map.venues.values());
        const randomVenue = venues[Math.floor(Math.random() * venues.length)];
        
        if (randomVenue && randomVenue.owner) {
            randomVenue.policeRaid = {
                startTime: Date.now(),
                duration: 3 * 60 * 60 * 1000, // 3 —á–∞—Å–∞
                active: true
            };
            
            this.showNotification(`–†–µ–π–¥ –ø–æ–ª–∏—Ü–∏–∏! –ó–∞–≤–µ–¥–µ–Ω–∏–µ "${randomVenue.name}" –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 3 —á–∞—Å–∞`, 'warning');
        }
    }

    triggerGoldenDistrict() {
        // –ó–æ–ª–æ—Ç–æ–π —Ä–∞–π–æ–Ω - —É–¥–≤–∞–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é
        const districts = Array.from(this.map.districts.values());
        const randomDistrict = districts[Math.floor(Math.random() * districts.length)];
        
        if (randomDistrict) {
            randomDistrict.goldenBonus = {
                startTime: Date.now(),
                duration: 7 * 24 * 60 * 60 * 1000, // 1 –Ω–µ–¥–µ–ª—è
                multiplier: 2,
                active: true
            };
            
            this.showNotification(`–ó–æ–ª–æ—Ç–æ–π —Ä–∞–π–æ–Ω! –†–∞–π–æ–Ω "${randomDistrict.name}" –¥–∞–µ—Ç –¥–≤–æ–π–Ω–æ–π –¥–æ—Ö–æ–¥ –Ω–∞ –Ω–µ–¥–µ–ª—é`, 'success');
        }
    }

    triggerSeasonalBonus() {
        // –°–µ–∑–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∞ 50% –Ω–∞ –¥–µ–Ω—å
        const bonus = {
            startTime: Date.now(),
            duration: 24 * 60 * 60 * 1000, // 1 –¥–µ–Ω—å
            multiplier: 1.5,
            active: true
        };
        
        this.events.push(bonus);
        this.showNotification('–°–µ–∑–æ–Ω–Ω—ã–π –±–æ–Ω—É—Å! –í—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–∞—é—Ç +50% –¥–æ—Ö–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å', 'success');
    }

    startGameSystems() {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∏–≥—Ä—ã
        this.player.startIncomeTimer();
        this.player.checkAchievements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.player.updateUI();
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π
    async attemptCapture() {
        if (!this.map.selectedVenue) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞', 'warning');
            return;
        }

        const venue = this.map.selectedVenue;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞—Ö–≤–∞—Ç–∞
        if (!this.map.canCaptureVenue(venue)) {
            return;
        }

        if (venue.owner) {
            // –ó–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–æ - –Ω–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
            this.startDuel(venue);
        } else {
            // –ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ - –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º
            this.captureVenue(venue);
        }
    }

    captureVenue(venue) {
        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        venue.owner = this.player.id;
        venue.captureTime = Date.now();
        venue.bonuses = {
            district: false,
            districtUnion: false,
            longTerm: 0
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        this.player.captureVenue(venue.id);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        this.map.updateVenueOwnership(venue.id, this.player.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–π–æ–Ω
        this.checkDistrictOwnership(venue);
        
        this.showNotification(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${venue.name}" –∑–∞—Ö–≤–∞—á–µ–Ω–æ!`, 'success');
        this.map.closeVenuePanel();
    }

    checkDistrictOwnership(venue) {
        const district = this.findVenueDistrict(venue.id);
        if (district) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –≤—Å–µ–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è–º–∏ —Ä–∞–π–æ–Ω–∞
            const allOwned = district.venues.every(venueId => {
                const v = this.map.venues.get(venueId);
                return v && v.owner === this.player.id;
            });
            
            if (allOwned) {
                district.owner = this.player.id;
                this.map.updateDistrictOwnership(district.id, this.player.id);
                this.showNotification(`–†–∞–π–æ–Ω "${district.name}" –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!`, 'success');
            }
        }
    }

    findVenueDistrict(venueId) {
        for (const district of this.map.districts.values()) {
            if (district.venues.includes(venueId)) {
                return district;
            }
        }
        return null;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥—É—ç–ª–µ–π
    startDuel(venue) {
        if (!venue.owner) return;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥—É—ç–ª–∏
        this.showDuelPanel(venue);
    }

    showDuelPanel(venue) {
        const panel = document.getElementById('duel-panel');
        const playerCardsEl = document.getElementById('player-cards');
        const enemyCardsEl = document.getElementById('enemy-cards');
        
        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã
        playerCardsEl.innerHTML = '';
        enemyCardsEl.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞
        const playerCards = this.player.getCardsByType('weapon').slice(0, 5);
        playerCards.forEach(card => {
            const cardEl = document.createElement('div');
            cardEl.className = 'card';
            cardEl.textContent = card.name;
            cardEl.onclick = () => this.selectCard(card);
            playerCardsEl.appendChild(cardEl);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (—Å–∫—Ä—ã—Ç—ã–µ)
        const enemyCards = this.generateEnemyCards(5);
        enemyCards.forEach(card => {
            const cardEl = document.createElement('div');
            cardEl.className = 'card';
            cardEl.textContent = '?';
            enemyCardsEl.appendChild(cardEl);
        });
        
        panel.classList.remove('hidden');
    }

    generateEnemyCards(count) {
        const cardTypes = ['weapon', 'armor', 'special'];
        const cards = [];
        
        for (let i = 0; i < count; i++) {
            const type = cardTypes[Math.floor(Math.random() * cardTypes.length)];
            cards.push({
                id: `enemy_card_${i}`,
                type: type,
                name: this.getRandomCardName(type),
                power: Math.floor(Math.random() * 10) + 1
            });
        }
        
        return cards;
    }

    getRandomCardName(type) {
        const names = {
            weapon: ['–ü–∏—Å—Ç–æ–ª–µ—Ç', '–ù–æ–∂', '–î—É–±–∏–Ω–∫–∞', '–ë–µ–π—Å–±–æ–ª—å–Ω–∞—è –±–∏—Ç–∞'],
            armor: ['–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç', '–ö–∞—Å–∫–∞', '–©–∏—Ç', '–ó–∞—â–∏—Ç–Ω—ã–π –∂–∏–ª–µ—Ç'],
            special: ['–ì—Ä–∞–Ω–∞—Ç–∞', '–î—ã–º–æ–≤–∞—è —à–∞—à–∫–∞', '–¢–∞–∑–µ—Ä', '–ü–µ—Ä—Ü–æ–≤—ã–π –±–∞–ª–ª–æ–Ω—á–∏–∫']
        };
        
        const typeNames = names[type] || ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'];
        return typeNames[Math.floor(Math.random() * typeNames.length)];
    }

    selectCard(card) {
        // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –≤ –¥—É—ç–ª–∏
        console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:', card);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è UI
    showMainMenu() {
        this.hideAllScreens();
        document.getElementById('main-menu').classList.add('active');
    }

    showGameScreen() {
        this.hideAllScreens();
        document.getElementById('game-screen').classList.add('active');
    }

    showClanMenu() {
        this.hideAllScreens();
        document.getElementById('clan-menu').classList.add('active');
        this.updateClanMenu();
    }

    showInventory() {
        this.hideAllScreens();
        document.getElementById('inventory-menu').classList.add('active');
        this.updateInventory();
    }

    showAchievements() {
        this.hideAllScreens();
        document.getElementById('achievements-menu').classList.add('active');
        this.updateAchievements();
    }

    showSettings() {
        this.hideAllScreens();
        document.getElementById('settings-menu').classList.add('active');
        this.updateSettings();
    }

    hideAllScreens() {
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.classList.remove('active'));
    }

    updateClanMenu() {
        const currentClanEl = document.getElementById('current-clan');
        const clansListEl = document.getElementById('clans-list');
        
        if (this.player.clanId) {
            const clan = this.clans.get(this.player.clanId);
            if (clan) {
                currentClanEl.innerHTML = `
                    <h4>${clan.name}</h4>
                    <p>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${clan.members.length}/20</p>
                    <p>–†–æ–ª—å: ${this.player.clanRole}</p>
                    <button class="menu-btn" onclick="game.leaveClan()">–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω</button>
                `;
            }
        } else {
            currentClanEl.innerHTML = `
                <p>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ</p>
                <button class="menu-btn" onclick="game.createClan()">–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω</button>
            `;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤
        clansListEl.innerHTML = '';
        this.clans.forEach(clan => {
            if (clan.id !== this.player.clanId) {
                const clanEl = document.createElement('div');
                clanEl.className = 'clan-item';
                clanEl.innerHTML = `
                    <div class="clan-details">
                        <h4>${clan.name}</h4>
                        <div class="clan-stats">
                            <p>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${clan.members.length}/20</p>
                            <p>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: ${clan.territory.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π</p>
                        </div>
                    </div>
                    <button class="menu-btn" onclick="game.joinClan('${clan.id}')">–í—Å—Ç—É–ø–∏—Ç—å</button>
                `;
                clansListEl.appendChild(clanEl);
            }
        });
    }

    updateInventory() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        const cardsListEl = document.getElementById('cards-list');
        const upgradesListEl = document.getElementById('upgrades-list');
        const protectionListEl = document.getElementById('protection-list');
        
        // –ö–∞—Ä—Ç—ã
        cardsListEl.innerHTML = '';
        this.player.inventory.cards.forEach(card => {
            const cardEl = document.createElement('div');
            cardEl.className = 'inventory-item';
            cardEl.innerHTML = `
                <div class="item-info">
                    <h4>${card.name}</h4>
                    <p class="item-description">${card.description}</p>
                </div>
                <div class="item-actions">
                    <button class="action-btn" onclick="game.useCard('${card.id}')">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</button>
                </div>
            `;
            cardsListEl.appendChild(cardEl);
        });
        
        // –£–ª—É—á—à–µ–Ω–∏—è
        upgradesListEl.innerHTML = '';
        this.player.inventory.upgrades.forEach(upgrade => {
            const upgradeEl = document.createElement('div');
            upgradeEl.className = 'inventory-item';
            upgradeEl.innerHTML = `
                <div class="item-info">
                    <h4>${upgrade.name}</h4>
                    <p class="item-description">${upgrade.description}</p>
                </div>
                <div class="item-actions">
                    <button class="action-btn" onclick="game.useUpgrade('${upgrade.id}')">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            `;
            upgradesListEl.appendChild(upgradeEl);
        });
        
        // –ó–∞—â–∏—Ç–∞
        protectionListEl.innerHTML = '';
        this.player.inventory.protection.forEach(protection => {
            const protectionEl = document.createElement('div');
            protectionEl.className = 'inventory-item';
            protectionEl.innerHTML = `
                <div class="item-info">
                    <h4>${protection.name}</h4>
                    <p class="item-description">${protection.description}</p>
                </div>
                <div class="item-actions">
                    <button class="action-btn" onclick="game.useProtection('${protection.id}')">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
            `;
            protectionListEl.appendChild(protectionEl);
        });
    }

    updateAchievements() {
        const achievementsListEl = document.getElementById('achievements-list');
        achievementsListEl.innerHTML = '';
        
        this.achievements.forEach(achievement => {
            const achievementEl = document.createElement('div');
            achievementEl.className = `achievement ${this.player.achievements.has(achievement.id) ? 'unlocked' : ''}`;
            achievementEl.innerHTML = `
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-info">
                    <h4>${achievement.name}</h4>
                    <p class="achievement-description">${achievement.description}</p>
                    <p>–ù–∞–≥—Ä–∞–¥–∞: $${achievement.reward}</p>
                </div>
            `;
            achievementsListEl.appendChild(achievementEl);
        });
    }

    updateSettings() {
        const soundToggle = document.getElementById('sound-toggle');
        const notificationsToggle = document.getElementById('notifications-toggle');
        const autoCaptureToggle = document.getElementById('auto-capture-toggle');
        
        soundToggle.checked = this.player.getSetting('sound');
        notificationsToggle.checked = this.player.getSetting('notifications');
        autoCaptureToggle.checked = this.player.getSetting('autoCapture');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        soundToggle.onchange = (e) => this.player.setSetting('sound', e.target.checked);
        notificationsToggle.onchange = (e) => this.player.setSetting('notifications', e.target.checked);
        autoCaptureToggle.onchange = (e) => this.player.setSetting('autoCapture', e.target.checked);
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.getElementById('notifications').appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∫–ª–∞–Ω–æ–≤
    createClan() {
        const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞:');
        if (name && name.trim()) {
            const clanId = 'clan_' + Math.random().toString(36).substr(2, 9);
            const clan = {
                id: clanId,
                name: name.trim(),
                members: [this.player.id],
                leader: this.player.id,
                created: Date.now(),
                territory: []
            };
            
            this.clans.set(clanId, clan);
            this.player.joinClan(clanId, 'leader');
            this.showNotification(`–ö–ª–∞–Ω "${name}" —Å–æ–∑–¥–∞–Ω!`, 'success');
            this.updateClanMenu();
        }
    }

    joinClan(clanId) {
        const clan = this.clans.get(clanId);
        if (clan && clan.members.length < 20) {
            clan.members.push(this.player.id);
            this.player.joinClan(clanId, 'member');
            this.showNotification(`–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω "${clan.name}"`, 'success');
            this.updateClanMenu();
        } else {
            this.showNotification('–ö–ª–∞–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        }
    }

    leaveClan() {
        if (this.player.clanId) {
            const clan = this.clans.get(this.player.clanId);
            if (clan) {
                clan.members = clan.members.filter(id => id !== this.player.id);
                this.player.leaveClan();
                this.showNotification('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω', 'info');
                this.updateClanMenu();
            }
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
function startGame() {
    game.showGameScreen();
}

function showClanMenu() {
    game.showClanMenu();
}

function showInventory() {
    game.showInventory();
}

function showAchievements() {
    game.showAchievements();
}

function showSettings() {
    game.showSettings();
}

function showMainMenu() {
    game.showMainMenu();
}

function showPlayerMenu() {
    game.showMainMenu();
}

function showMapLegend() {
    game.showNotification('–õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã:\n–°–∏–Ω–∏–π - –≤–∞—à–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n–ö—Ä–∞—Å–Ω—ã–π - —á—É–∂–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è\n–û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è', 'info');
}

function attemptCapture() {
    game.attemptCapture();
}

function startDuel() {
    if (game.map.selectedVenue) {
        game.startDuel(game.map.selectedVenue);
    }
}

function closeVenuePanel() {
    game.map.closeVenuePanel();
}

function closeDuelPanel() {
    document.getElementById('duel-panel').classList.add('hidden');
}

function playCard() {
    game.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä—ã', 'info');
}

function endTurn() {
    game.showNotification('–•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω', 'info');
}

function showInventoryTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(`${tabName}-tab`).classList.add('active');
    document.querySelector(`[onclick="showInventoryTab('${tabName}')"]`).classList.add('active');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
let game;

document.addEventListener('DOMContentLoaded', () => {
    game = new Game();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function skipLoading() {
    if (game && game.ui) {
        game.ui.hideLoadingScreen();
        game.ui.showMainMenu();
        game.showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', 'warning');
    }
}
