// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: admin / 372324

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
let isAdminMode = false;
let isMarkupMode = false;
let isCreateEstablishmentMode = false;
let isDeleteEstablishmentMode = false;
let isMoveEstablishmentMode = false;
let isEstablishmentSelectionMode = false;
let isPolygonDrawingMode = false;
let selectedEstablishment = null;
let selectedForDeleteEstablishment = null;
let selectedForMoveEstablishment = null;
let currentPolygon = null;
let polygonPoints = [];
let currentMarkupData = {
    establishments: [],
    territories: [],
    districts: []
};

// –î–µ–ª–∞–µ–º currentMarkupData –≥–ª–æ–±–∞–ª—å–Ω–æ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
window.currentMarkupData = currentMarkupData;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞ –∫–∞—Ä—Ç—ã
let currentZoom = 16;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑—É–º–∞
function getIconSizeForZoom(zoom) {
    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ (–ø—Ä–∏ –∑—É–º–µ 16)
    const baseSize = 45;
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (25% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ)
    const minSize = Math.round(baseSize * 0.25);
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–ø—Ä–∏ –∑—É–º–µ 18+)
    const maxSize = baseSize;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    // –ü—Ä–∏ –∑—É–º–µ 10 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–¥–∞–ª–µ–Ω–∏–µ) - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    // –ü—Ä–∏ –∑—É–º–µ 18 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ) - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    let scaleFactor;
    if (zoom <= 10) {
        scaleFactor = 0.25; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    } else if (zoom >= 18) {
        scaleFactor = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    } else {
        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É 10 –∏ 18 –∑—É–º–æ–º
        scaleFactor = 0.25 + (zoom - 10) * (1.0 - 0.25) / (18 - 10);
    }
    
    const size = Math.round(baseSize * scaleFactor);
    return {
        size: size,
        anchor: Math.round(size / 2)
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∫–æ–Ω–æ–∫ –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑—É–º–∞
function updateAllEstablishmentIcons(zoom) {
    currentZoom = zoom;
    
    currentMarkupData.establishments.forEach(establishment => {
        if (establishment.marker) {
            updateEstablishmentIcon(establishment);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function updateEstablishmentIcon(establishment) {
    if (!establishment.marker) return;
    
    const iconSize = getIconSizeForZoom(currentZoom);
    const territoryColor = establishment.territory ? establishment.territory.color : getEstablishmentColor(establishment.type);
    
    const newIcon = L.divIcon({
        html: `
            <div style="
                background: linear-gradient(135deg, ${territoryColor}, #ffffff);
                border: 4px solid var(--warm-gold);
                border-radius: 50%;
                width: ${iconSize.size}px;
                height: ${iconSize.size}px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--deep-black);
                font-weight: bold;
                font-size: ${Math.round(iconSize.size * 0.47)}px;
                box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
            ">
                ${getEstablishmentIcon(establishment.type)}
            </div>
        `,
        iconSize: [iconSize.size, iconSize.size],
        iconAnchor: [iconSize.anchor, iconSize.anchor],
        className: 'markup-establishment-marker'
    });
    
    establishment.marker.setIcon(newIcon);
}

// –ü–æ–∫–∞–∑ popup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—Ö–≤–∞—Ç–∞ –∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
function showCapturePopup(establishment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (!user) {
        const popupContent = `
            <div style="font-family: var(--font-sans); padding: 0.5rem; text-align: center; min-width: 200px;">
                <h4 style="color: var(--warm-gold); font-size: 1rem; margin: 0 0 0.5rem 0;">${establishment.name}</h4>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–¢–∏–ø:</strong> ${establishment.type}</p>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–î–æ—Ö–æ–¥:</strong> $${establishment.income}/—á–∞—Å</p>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> $${establishment.captureCost}</p>
                <p style="color: #d32f2f; font-size: 0.8rem; margin: 0.5rem 0; font-weight: bold;">
                    üîí –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –ø–æ–∫—É–ø–∫–∏
                </p>
            </div>
        `;
        
        L.popup()
            .setLatLng(establishment.coords)
            .setContent(popupContent)
            .openOn(window.gangsterMap);
        return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (user.name === 'admin') {
        const popupContent = `
            <div style="font-family: var(--font-sans); padding: 0.5rem; text-align: center; min-width: 200px;">
                <h4 style="color: var(--warm-gold); font-size: 1rem; margin: 0 0 0.5rem 0;">${establishment.name}</h4>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–¢–∏–ø:</strong> ${establishment.type}</p>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–î–æ—Ö–æ–¥:</strong> $${establishment.income}/—á–∞—Å</p>
                <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> $${establishment.captureCost}</p>
                <p style="color: #d32f2f; font-size: 0.8rem; margin: 0.5rem 0; font-weight: bold;">
                    ‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
                </p>
            </div>
        `;
        
        L.popup()
            .setLatLng(establishment.coords)
            .setContent(popupContent)
            .openOn(window.gangsterMap);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const playerLat = position.coords.latitude;
            const playerLng = position.coords.longitude;
            const establishmentLat = establishment.coords[0]; // lat
            const establishmentLng = establishment.coords[1]; // lng
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
            const distance = calculateDistance(playerLat, playerLng, establishmentLat, establishmentLng);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            const user = typeof currentUser === 'function' ? currentUser() : currentUser;
            const playerMoney = user && user.money ? user.money : 10000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É
            const isOwner = establishment.owner && establishment.owner.name === user.name;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π
            const canCapture = !isOwner && distance <= 20; // 20 –º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü
            const canBuy = !isOwner && playerMoney >= establishment.captureCost; // –ü–æ–∫—É–ø–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü
            
            // –°–æ–∑–¥–∞–µ–º popup —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            const popupContent = `
                <div style="font-family: var(--font-sans); padding: 0.5rem; text-align: center; min-width: 220px;">
                    <h4 style="color: var(--warm-gold); font-size: 1rem; margin: 0 0 0.5rem 0;">${establishment.name}</h4>
                    <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–¢–∏–ø:</strong> ${establishment.type}</p>
                    <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–î–æ—Ö–æ–¥:</strong> $${establishment.income}/—á–∞—Å</p>
                    <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> $${establishment.captureCost}</p>
                    ${isOwner ? 
                        `<p style="font-size: 0.8rem; margin: 0.25rem 0; color: var(--warm-gold); font-weight: bold;">
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> –í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
                        </p>` :
                        `<p style="font-size: 0.7rem; margin: 0.25rem 0; color: ${canCapture ? 'var(--warm-gold)' : '#d32f2f'};">
                            <strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${distance.toFixed(1)}–º ${canCapture ? '(–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ)' : '(—Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ)'}
                        </p>
                        <p style="font-size: 0.7rem; margin: 0.25rem 0; color: ${canBuy ? 'var(--warm-gold)' : '#d32f2f'};">
                            <strong>–í–∞—à–∏ –¥–µ–Ω—å–≥–∏:</strong> $${playerMoney.toLocaleString()}
                        </p>`
                    }
                    
                    <div style="display: flex; gap: 0.5rem; margin-top: 0.5rem;">
                        ${isOwner ? 
                            `<button onclick="attemptSellEstablishment('${establishment.id}')" 
                                    style="
                                        background: linear-gradient(45deg, #d32f2f, #b71c1c);
                                        border: 2px solid var(--warm-gold);
                                        color: var(--cream);
                                        padding: 0.4rem 0.8rem;
                                        cursor: pointer;
                                        font-weight: bold;
                                        font-size: 0.8rem;
                                        border-radius: 4px;
                                        flex: 1;
                                        opacity: 1;
                                        transition: all 0.3s ease;
                                    " 
                                    onmouseover="this.style.background='linear-gradient(45deg, #f44336, #d32f2f)'"
                                    onmouseout="this.style.background='linear-gradient(45deg, #d32f2f, #b71c1c)'">
                                üí∞ –ü—Ä–æ–¥–∞—Ç—å
                            </button>` :
                            `<button onclick="attemptCapture('${establishment.id}')" 
                                    style="
                                        background: ${canCapture ? 'linear-gradient(45deg, #2e7d32, #1b5e20)' : 'linear-gradient(45deg, #666, #444)'};
                                        border: 2px solid var(--warm-gold);
                                        color: var(--cream);
                                        padding: 0.4rem 0.8rem;
                                        cursor: ${canCapture ? 'pointer' : 'not-allowed'};
                                        font-weight: bold;
                                        font-size: 0.8rem;
                                        border-radius: 4px;
                                        flex: 1;
                                        opacity: ${canCapture ? '1' : '0.6'};
                                    " 
                                    ${canCapture ? '' : 'disabled'}>
                                    ${canCapture ? 'üéØ –ó–∞—Ö–≤–∞—Ç–∏—Ç—å' : `‚ùå -${(distance - 20).toFixed(0)}–º`}
                            </button>`
                        }
                        
                        ${isOwner ? 
                            `<button onclick="showEstablishmentInfo('${establishment.id}')" 
                                    style="
                                        background: linear-gradient(45deg, #8b7355, #5d4e37);
                                        border: 2px solid var(--warm-gold);
                                        color: var(--cream);
                                        padding: 0.4rem 0.8rem;
                                        cursor: pointer;
                                        font-weight: bold;
                                        font-size: 0.8rem;
                                        border-radius: 4px;
                                        flex: 1;
                                        opacity: 1;
                                    ">
                                üìä –ò–Ω—Ñ–æ
                            </button>` :
                            `<button onclick="attemptBuy('${establishment.id}')" 
                                    style="
                                        background: ${canBuy ? 'linear-gradient(45deg, #1976d2, #1565c0)' : 'linear-gradient(45deg, #666, #444)'};
                                        border: 2px solid var(--warm-gold);
                                        color: var(--cream);
                                        padding: 0.4rem 0.8rem;
                                        cursor: ${canBuy ? 'pointer' : 'not-allowed'};
                                        font-weight: bold;
                                        font-size: 0.8rem;
                                        border-radius: 4px;
                                        flex: 1;
                                        opacity: ${canBuy ? '1' : '0.6'};
                                    " 
                                    ${canBuy ? '' : 'disabled'}>
                                    ${canBuy ? 'üí∞ –ö—É–ø–∏—Ç—å' : '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}
                            </button>`
                        }
                    </div>
                </div>
            `;
            
            // –°–æ–∑–¥–∞–µ–º popup –Ω–∞ –∫–∞—Ä—Ç–µ
            L.popup()
                .setLatLng(establishment.coords)
                .setContent(popupContent)
                .openOn(window.gangsterMap);
                
        }, function(error) {
            // –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'error');
        });
    } else {
        showMessage('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
    }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
function calculateDistance(lat1, lng1, lat2, lng2) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (!lat1 || !lng1 || !lat2 || !lng2 || 
        isNaN(lat1) || isNaN(lng1) || isNaN(lat2) || isNaN(lng2)) {
        console.error('Invalid coordinates:', { lat1, lng1, lat2, lng2 });
        return 0;
    }
    
    const R = 6371000; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLng/2) * Math.sin(dLng/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (isNaN(distance)) {
        console.error('Distance calculation failed:', { lat1, lng1, lat2, lng2 });
        return 0;
    }
    
    return distance;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è (—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –∏ –º–∞—Ä–∫–µ—Ä)
function updateEstablishmentVisualization(establishment) {
    console.log('updateEstablishmentVisualization - –∑–∞–≤–µ–¥–µ–Ω–∏–µ:', establishment.name, '–≤–ª–∞–¥–µ–ª–µ—Ü:', establishment.owner);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
    if (establishment.polygon) {
        const territoryColor = establishment.owner ? establishment.owner.color : getEstablishmentColor(establishment.type);
        console.log('updateEstablishmentVisualization - —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:', territoryColor);
        establishment.polygon.setStyle({
            fillColor: territoryColor,
            color: territoryColor,
            weight: 3,
            opacity: 0.8,
            fillOpacity: 0.3
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
        if (establishment.owner) {
            console.log('updateEstablishmentVisualization - –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:', establishment.owner.name);
            addOwnerLabelToTerritory(establishment);
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
    if (establishment.marker) {
        updateEstablishmentIcon(establishment);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (typeof window.saveMarkupDataToLocalStorage === 'function') {
        window.saveMarkupDataToLocalStorage();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
function addOwnerLabelToTerritory(establishment) {
    if (!establishment.polygon || !establishment.owner) return;
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (establishment.ownerLabel) {
        if (Array.isArray(establishment.ownerLabel)) {
            establishment.ownerLabel.forEach(element => {
                window.gangsterMap.removeLayer(element);
            });
        } else {
            window.gangsterMap.removeLayer(establishment.ownerLabel);
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
    const latLngs = establishment.polygon.getLatLngs()[0];
    if (!latLngs || latLngs.length < 3) return;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø—Ä–∞–≤—É—é —Ç–æ—á–∫—É –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–º–µ–Ω–∏
    let rightmostPoint = latLngs[0];
    let rightmostIndex = 0;
    
    for (let i = 1; i < latLngs.length; i++) {
        if (latLngs[i].lng > rightmostPoint.lng) {
            rightmostPoint = latLngs[i];
            rightmostIndex = i;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é –≤–¥–æ–ª—å –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
    const ownerLabelElements = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏ (–≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑ –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏)
    const prevIndex = rightmostIndex > 0 ? rightmostIndex - 1 : latLngs.length - 1;
    const nextIndex = rightmostIndex < latLngs.length - 1 ? rightmostIndex + 1 : 0;
    
    const prevPoint = latLngs[prevIndex];
    const nextPoint = latLngs[nextIndex];
    
    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ø–æ —à–∏—Ä–æ—Ç–µ
    const latDiffPrev = Math.abs(rightmostPoint.lat - prevPoint.lat);
    const latDiffNext = Math.abs(rightmostPoint.lat - nextPoint.lat);
    
    let direction;
    if (latDiffPrev > latDiffNext) {
        direction = rightmostPoint.lat > prevPoint.lat ? 'up' : 'down';
    } else {
        direction = rightmostPoint.lat > nextPoint.lat ? 'up' : 'down';
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
    const lineLength = 0.0003; // –î–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const stepSize = 0.00005; // –†–∞–∑–º–µ—Ä —à–∞–≥–∞ –¥–ª—è –ø—É–Ω–∫—Ç–∏—Ä–∞
    
    const startLat = rightmostPoint.lat;
    const startLng = rightmostPoint.lng + 0.0001; // –°–º–µ—â–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–ø—Ä–∞–≤–æ –æ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
    
    const endLat = direction === 'up' ? startLat + lineLength : startLat - lineLength;
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
    const dashPoints = [];
    for (let i = 0; i <= lineLength / stepSize; i++) {
        const currentLat = startLat + (direction === 'up' ? i * stepSize : -i * stepSize);
        if (i % 2 === 0) { // –¢–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∏—Ä–∞
            dashPoints.push([currentLat, startLng]);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
    const dashedLine = L.polyline(dashPoints, {
        color: establishment.owner.color,
        weight: 2,
        opacity: 0.7,
        dashArray: '5, 5',
        className: 'owner-dashed-line'
    }).addTo(window.gangsterMap);
    
    ownerLabelElements.push(dashedLine);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –≤ –∫–æ–Ω—Ü–µ –ª–∏–Ω–∏–∏
    const textPosition = [endLat, startLng];
    const ownerIcon = L.divIcon({
        html: `
            <div style="
                color: ${establishment.owner.color};
                font-family: 'Libre Baskerville', 'Times New Roman', serif;
                font-size: 0.5rem;
                font-style: italic;
                font-weight: normal;
                text-align: center;
                white-space: nowrap;
                text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
                background: rgba(244, 241, 235, 0.9);
                padding: 0.1rem 0.4rem;
                border-radius: 3px;
                border: 1px solid ${establishment.owner.color};
                backdrop-filter: blur(3px);
                transform: rotate(${direction === 'up' ? '-5deg' : '5deg'});
                pointer-events: none;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            ">
                ${establishment.owner.name}
            </div>
        `,
        iconSize: [60, 12],
        iconAnchor: [30, 6],
        className: 'vintage-owner-label'
    });
    
    const textMarker = L.marker(textPosition, { icon: ownerIcon }).addTo(window.gangsterMap);
    ownerLabelElements.push(textMarker);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –º–∞—Å—Å–∏–≤
    establishment.ownerLabel = ownerLabelElements;
}

// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function attemptCapture(establishmentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    if (!user) {
        showMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
        return;
    }
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (user.name === 'admin') {
        showMessage('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è!', 'error');
        return;
    }
    
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —É–∂–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É
    if (establishment.owner && establishment.owner.name === user.name) {
        showMessage('–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º!', 'info');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
            const playerLat = position.coords.latitude;
            const playerLng = position.coords.longitude;
            const establishmentLat = establishment.coords[0]; // lat
            const establishmentLng = establishment.coords[1]; // lng
            
            const distance = calculateDistance(playerLat, playerLng, establishmentLat, establishmentLng);
            
            if (distance > 20) {
                showMessage(`–°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)}–º`, 'error');
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            establishment.owner = {
                name: user.name,
                color: user.color
            };
            
            console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è:', establishment.name, '–í–ª–∞–¥–µ–ª–µ—Ü:', establishment.owner);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
            updateEstablishmentVisualization(establishment);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            if (user.territories) {
                user.territories.push(establishmentId);
            } else {
                user.territories = [establishmentId];
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            if (user.totalIncome === undefined) {
                user.totalIncome = 0;
            }
            user.totalIncome += establishment.income;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
            if (typeof window.saveCurrentUser === 'function') {
                window.saveCurrentUser();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö
            saveMarkupDataToLocalStorage();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
            if (window.githubSyncService && window.githubSyncService.githubToken) {
                window.githubSyncService.syncToGist().catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
                });
            }
            
            showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" –∑–∞—Ö–≤–∞—á–µ–Ω–æ! –î–æ—Ö–æ–¥: $${establishment.income}/—á–∞—Å`, 'success');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            window.gangsterMap.closePopup();
            
        }, function(error) {
            showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'error');
        });
    } else {
        showMessage('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function attemptBuy(establishmentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    if (!user) {
        showMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
        return;
    }
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (user.name === 'admin') {
        showMessage('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è!', 'error');
        return;
    }
    
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —É–∂–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É
    if (establishment.owner && establishment.owner.name === user.name) {
        showMessage('–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º!', 'info');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
    const playerMoney = user && user.money ? user.money : 10000;
    
    if (playerMoney < establishment.captureCost) {
        showMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ: $${establishment.captureCost}, —É –≤–∞—Å: $${playerMoney}`, 'error');
        return;
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –∏–≥—Ä–æ–∫–∞
    if (user) {
        user.money -= establishment.captureCost;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        establishment.owner = {
            name: user.name,
            color: user.color
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
        if (user.territories) {
            user.territories.push(establishmentId);
        } else {
            user.territories = [establishmentId];
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        if (user.totalIncome === undefined) {
            user.totalIncome = 0;
        }
        user.totalIncome += establishment.income;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
        if (typeof window.saveCurrentUser === 'function') {
            window.saveCurrentUser();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
        updateEstablishmentVisualization(establishment);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö
        saveMarkupDataToLocalStorage();
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
        if (window.githubSyncService && window.githubSyncService.githubToken) {
            window.githubSyncService.syncToGist().catch(error => {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
            });
        }
    }
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" –∫—É–ø–ª–µ–Ω–æ –∑–∞ $${establishment.captureCost}! –î–æ—Ö–æ–¥: $${establishment.income}/—á–∞—Å`, 'success');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
    window.gangsterMap.closePopup();
}

// –ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function attemptSellEstablishment(establishmentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    if (!user) {
        showMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É!', 'error');
        return;
    }
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (user.name === 'admin') {
        showMessage('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è!', 'error');
        return;
    }
    
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —ç—Ç–æ–º—É –∏–≥—Ä–æ–∫—É
    if (!establishment.owner || establishment.owner.name !== user.name) {
        showMessage('–í—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º!', 'error');
        return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (80% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏)
    const sellPrice = Math.floor(establishment.captureCost * 0.8);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" –∑–∞ $${sellPrice}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`)) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É
        if (user) {
            user.money += sellPrice;
            
            // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –∏–≥—Ä–æ–∫–∞
            if (user.territories) {
                const territoryIndex = user.territories.indexOf(establishmentId);
                if (territoryIndex > -1) {
                    user.territories.splice(territoryIndex, 1);
                }
            }
            
            // –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
            if (user.totalIncome !== undefined && user.totalIncome >= establishment.income) {
                user.totalIncome -= establishment.income;
            }
            
            // –£–¥–∞–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–∑ –∑–∞–≤–µ–¥–µ–Ω–∏—è
            establishment.owner = null;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
            updateEstablishmentVisualization(establishment);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ localStorage
            if (typeof window.saveCurrentUser === 'function') {
                window.saveCurrentUser();
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö
            saveMarkupDataToLocalStorage();
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
            if (window.githubSyncService && window.githubSyncService.githubToken) {
                window.githubSyncService.syncToGist().catch(error => {
                    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
                });
            }
            
            showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" –ø—Ä–æ–¥–∞–Ω–æ –∑–∞ $${sellPrice}!`, 'success');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup
            window.gangsterMap.closePopup();
        }
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
function showEstablishmentInfo(establishmentId) {
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    const totalIncome = establishment.income || 0;
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π popup
    const infoContent = `
        <div style="font-family: var(--font-sans); padding: 0.5rem; text-align: center; min-width: 200px;">
            <h4 style="color: var(--warm-gold); font-size: 1rem; margin: 0 0 0.5rem 0;">üìä ${establishment.name}</h4>
            <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–¢–∏–ø:</strong> ${establishment.type}</p>
            <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–î–æ—Ö–æ–¥:</strong> $${totalIncome}/—á–∞—Å</p>
            <p style="font-size: 0.8rem; margin: 0.25rem 0;"><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${establishment.owner ? establishment.owner.name : '–ù–∏–∫—Ç–æ'}</p>
            <p style="font-size: 0.7rem; margin: 0.25rem 0; color: var(--warm-gold);">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> –í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
            </p>
            <div style="margin-top: 0.5rem; padding: 0.3rem; background: rgba(139, 115, 85, 0.1); border-radius: 4px;">
                <p style="font-size: 0.7rem; margin: 0; color: var(--deep-black);">
                    üí° –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å" —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è
                </p>
            </div>
        </div>
    `;
    
    // –°–æ–∑–¥–∞–µ–º popup –Ω–∞ –∫–∞—Ä—Ç–µ
    L.popup()
        .setLatLng(establishment.coords)
        .setContent(infoContent)
        .openOn(window.gangsterMap);
}

// –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    function waitForMapAndLoadData() {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã...');
        
        if (window.gangsterMap && window.gangsterMap.getContainer()) {
            console.log('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞, –∑–∞—Ç–µ–º –∏–∑ localStorage
            if (window.githubSyncService && window.githubSyncService.githubToken) {
                console.log('–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞...');
                window.githubSyncService.syncFromGist().then(() => {
                    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –æ–±–ª–∞–∫–∞');
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    setTimeout(() => {
                        if (currentMarkupData.establishments.length === 0) {
                            console.log('–ò–∑ –æ–±–ª–∞–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage...');
                            loadMarkupDataFromLocalStorage();
                        }
                    }, 500);
                }).catch(error => {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage:', error);
                    loadMarkupDataFromLocalStorage();
                });
            } else {
                console.log('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ GitHub, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage...');
                loadMarkupDataFromLocalStorage();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                const markupData = localStorage.getItem('gangsters_markup_data');
                if (!markupData || JSON.parse(markupData).establishments.length === 0) {
                    console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ–¥–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.');
                } else {
                    console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
                }
            }, 3000);
        } else {
            console.log('–ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞, –∂–¥–µ–º...');
            setTimeout(waitForMapAndLoadData, 500);
        }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    setTimeout(waitForMapAndLoadData, 2000);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
    setTimeout(() => {
        if (currentMarkupData.establishments.length === 0) {
            console.log('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            loadMarkupDataFromLocalStorage();
        }
    }, 5000);
    
    // –¢–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
    window.addEventListener('mapReady', function() {
        console.log('–°–æ–±—ã—Ç–∏–µ mapReady –ø–æ–ª—É—á–µ–Ω–æ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
        setTimeout(() => {
            if (currentMarkupData.establishments.length === 0) {
                loadMarkupDataFromLocalStorage();
            }
        }, 1000);
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAdminAuth() {
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    return user && user.name === 'admin';
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π –±–∞—Ä

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
function toggleMarkupMode() {
    if (!checkAdminAuth()) {
        showMessage('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error');
        return;
    }

    isMarkupMode = !isMarkupMode;
    const button = document.getElementById('markup-toggle-btn');
    
    if (isMarkupMode) {
        button.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
        button.style.background = 'linear-gradient(45deg, #2d5016, #1e3a0a)';
        showTerritoryMarkupNotification('–†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –≤–∫–ª—é—á–µ–Ω! –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏.');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
        initEstablishmentSelectionMode();
    } else {
        button.textContent = 'üéØ –†–∞–∑–º–µ—Ç–∫–∞';
        button.style.background = 'linear-gradient(45deg, var(--brick-red), var(--dark-brick))';
        hideTerritoryMarkupNotification();
        showMessage('–†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω.', 'info');
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã
        disableAllMarkupModes();
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
function toggleCreateEstablishmentMode() {
    if (!checkAdminAuth()) {
        showMessage('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error');
        return;
    }

    isCreateEstablishmentMode = !isCreateEstablishmentMode;
    const button = document.getElementById('create-establishment-btn');
    
    if (isCreateEstablishmentMode) {
        button.textContent = '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ';
        button.style.background = 'linear-gradient(45deg, #2d5016, #1e3a0a)';
        showMessage('–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.', 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
        showCreateEstablishmentForm();
    } else {
        button.textContent = 'üè¢ –°–æ–∑–¥–∞—Ç—å';
        button.style.background = 'linear-gradient(45deg, var(--steel-blue), var(--midnight-blue))';
        showMessage('–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω.', 'info');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
        hideCreateEstablishmentForm();
        disableCreateEstablishmentMode();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function initEstablishmentSelectionMode() {
    isEstablishmentSelectionMode = true;
    isPolygonDrawingMode = false;
    selectedEstablishment = null;
    
    showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', 'info');
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
    highlightEstablishmentsForSelection();
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
function highlightEstablishmentsForSelection() {
    if (!window.gangsterMap) return;
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    currentMarkupData.establishments.forEach(establishment => {
        if (establishment.marker) {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            establishment.marker.getElement().style.filter = 'brightness(1.3) drop-shadow(0 0 10px #d4af37)';
            establishment.marker.getElement().style.cursor = 'pointer';
            establishment.marker.getElement().style.transition = 'all 0.3s ease';
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π (–∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    window.gangsterMap.on('click', onEstablishmentSelection);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å –∑–∞–≤–µ–¥–µ–Ω–∏–π
function removeEstablishmentHighlighting() {
    if (!window.gangsterMap) return;
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –≤—Å–µ—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π
    currentMarkupData.establishments.forEach(establishment => {
        if (establishment.marker) {
            // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            establishment.marker.getElement().style.filter = '';
            establishment.marker.getElement().style.cursor = '';
            establishment.marker.getElement().style.transition = '';
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function onEstablishmentSelection(e) {
    if (!isEstablishmentSelectionMode) return;
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–¥–∏—É—Å–µ 50 –º–µ—Ç—Ä–æ–≤
    const clickedLat = e.latlng.lat;
    const clickedLng = e.latlng.lng;
    
    let nearestEstablishment = null;
    let minDistance = Infinity;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    currentMarkupData.establishments.forEach(establishment => {
        const distance = calculateDistance(
            clickedLat, clickedLng,
            establishment.coords[0], establishment.coords[1]
        );
        
        if (distance < 50 && distance < minDistance) {
            minDistance = distance;
            nearestEstablishment = establishment;
        }
    });
    
    if (nearestEstablishment) {
        selectedEstablishment = nearestEstablishment;
        isEstablishmentSelectionMode = false;
        isPolygonDrawingMode = true;
        
        showTerritoryMarkupNotification(`–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è: ${nearestEstablishment.name}. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.`);
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π
        window.gangsterMap.off('click', onEstablishmentSelection);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        startPolygonDrawing();
    } else {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ! –ö–ª–∏–∫–Ω–∏—Ç–µ —Ä—è–¥–æ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º.', 'warning');
    }
}

// –ù–∞—á–∞–ª–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function startPolygonDrawing() {
    if (!window.gangsterMap) return;
    
    polygonPoints = [];
    currentPolygon = null;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    window.gangsterMap.on('click', onPolygonPointAdd);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–∏–π –±–∞—Ä
    addPolygonControlsToTopBar();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function onPolygonPointAdd(e) {
    if (!isPolygonDrawingMode) return;
    
    const lat = e.latlng.lat;
    const lng = e.latlng.lng;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
    polygonPoints.push([lat, lng]);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
    if (currentPolygon && window.gangsterMap) {
        window.gangsterMap.removeLayer(currentPolygon);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è –µ—Å–ª–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
    const territoryColor = selectedEstablishment.territory ? selectedEstablishment.territory.color : getEstablishmentColor(selectedEstablishment.type);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
    if (polygonPoints.length >= 3) {
        currentPolygon = L.polygon(polygonPoints, {
            fillColor: territoryColor,
            fillOpacity: 0.2,
            color: territoryColor,
            weight: 2,
            opacity: 0.8,
            dashArray: '5, 5',
            className: 'temp-polygon'
        }).addTo(window.gangsterMap);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Ç–æ—á–∫–∏
    const pointMarker = L.marker([lat, lng], {
        icon: L.divIcon({
            html: `<div style="
                background: ${territoryColor};
                border: 2px solid var(--warm-gold);
                border-radius: 50%;
                width: 12px;
                height: 12px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            "></div>`,
            iconSize: [12, 12],
            iconAnchor: [6, 6],
            className: 'polygon-point-marker'
        })
    }).addTo(window.gangsterMap);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if (!selectedEstablishment.tempPointMarkers) {
        selectedEstablishment.tempPointMarkers = [];
    }
    selectedEstablishment.tempPointMarkers.push(pointMarker);
    
    showMessage(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ—á–∫–∞ ${polygonPoints.length}. –ö–ª–∏–∫–Ω–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "OK" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`, 'info');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ—á–µ–∫
    updatePolygonPointsCount();
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π –±–∞—Ä
function addPolygonControlsToTopBar() {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    removePolygonControls();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
    const controlsContainer = document.createElement('div');
    controlsContainer.id = 'polygon-controls-topbar';
    controlsContainer.style.cssText = `
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin-left: 1rem;
    `;
    
    controlsContainer.innerHTML = `
        <div style="
            display: flex;
            gap: 0.25rem;
            padding: 0.25rem;
            background: rgba(139, 38, 53, 0.2);
            border-radius: 4px;
            border: 1px solid var(--brick-red);
            align-items: center;
        ">
            <span style="color: var(--cream); font-size: 0.8rem; margin-right: 0.5rem;">
                –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: ${selectedEstablishment ? selectedEstablishment.name : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
            </span>
            <span id="polygon-points-count" style="color: var(--warm-gold); font-size: 0.8rem; margin-right: 0.5rem;">0 —Ç–æ—á–µ–∫</span>
            <button onclick="finishPolygon()" style="
                background: linear-gradient(45deg, #2d5016, #1e3a0a);
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.25rem 0.5rem;
                cursor: pointer;
                font-weight: bold;
                font-size: 0.8rem;
                border-radius: 3px;
                min-width: 50px;
            ">‚úÖ OK</button>
            <button onclick="cancelPolygon()" style="
                background: linear-gradient(45deg, var(--concrete), var(--dark-concrete));
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.25rem 0.5rem;
                cursor: pointer;
                font-weight: bold;
                font-size: 0.8rem;
                border-radius: 3px;
                min-width: 50px;
            ">‚ùå –û—Ç–º–µ–Ω–∞</button>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π –±–∞—Ä
    const gameControls = document.querySelector('.game-controls');
    if (gameControls) {
        gameControls.appendChild(controlsContainer);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ—á–µ–∫
    updatePolygonPointsCount();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ—á–µ–∫
function updatePolygonPointsCount() {
    const countElement = document.getElementById('polygon-points-count');
    if (countElement) {
        countElement.textContent = polygonPoints.length;
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function finishPolygon() {
    if (polygonPoints.length < 3) {
        showMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏!', 'error');
        return;
    }
    
    if (!selectedEstablishment) {
        showMessage('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!', 'error');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (!selectedEstablishment.territory) {
        selectedEstablishment.territory = {
            polygon: polygonPoints,
            color: getEstablishmentColor(selectedEstablishment.type),
            opacity: 0.3
        };
    } else {
        selectedEstablishment.territory.polygon = polygonPoints;
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
    if (currentPolygon && window.gangsterMap) {
        window.gangsterMap.removeLayer(currentPolygon);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
    const finalPolygon = L.polygon(polygonPoints, {
        fillColor: selectedEstablishment.territory.color,
        fillOpacity: selectedEstablishment.territory.opacity,
        color: selectedEstablishment.territory.color,
        weight: 2,
        opacity: 0.8,
        className: 'final-territory-polygon'
    }).addTo(window.gangsterMap);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
    selectedEstablishment.polygon = finalPolygon;
    
    // Popup —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ showCapturePopup() –ø—Ä–∏ –∫–ª–∏–∫–µ
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫
    removePolygonPointMarkers();
    
    // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    removePolygonControls();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    disableAllMarkupModes();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveMarkupDataToLocalStorage();
    
    showMessage(`–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –¥–ª—è "${selectedEstablishment.name}" —Å–æ–∑–¥–∞–Ω–∞! –¢–æ—á–∫–∏: ${polygonPoints.length}`, 'success');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏
    const markupBtn = document.getElementById('markup-toggle-btn');
    if (markupBtn) {
        markupBtn.textContent = 'üéØ –†–∞–∑–º–µ—Ç–∫–∞';
        markupBtn.style.background = 'linear-gradient(45deg, var(--brick-red), var(--dark-brick))';
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    resetMarkupState();
}

// –û—Ç–º–µ–Ω–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function cancelPolygon() {
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫
    if (currentPolygon && window.gangsterMap) {
        window.gangsterMap.removeLayer(currentPolygon);
    }
    
    // –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫
    removePolygonPointMarkers();
    
    // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    removePolygonControls();
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    disableAllMarkupModes();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    resetMarkupState();
    
    showMessage('–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', 'info');
}

// –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º
function removePolygonControls() {
    // –£–¥–∞–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const controlsDiv = document.getElementById('polygon-controls');
    if (controlsDiv) {
        document.body.removeChild(controlsDiv);
    }
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–∞—Ä–∞
    const topBarControls = document.getElementById('polygon-controls-topbar');
    if (topBarControls) {
        topBarControls.remove();
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Ç–æ—á–µ–∫ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
function removePolygonPointMarkers() {
    if (!window.gangsterMap) return;
    
    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ eachLayer
    window.gangsterMap.eachLayer(function(layer) {
        if (layer instanceof L.Marker && 
            layer.options.icon && 
            layer.options.icon.options.className === 'polygon-point-marker') {
            window.gangsterMap.removeLayer(layer);
        }
    });
    
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    if (selectedEstablishment && selectedEstablishment.tempPointMarkers) {
        selectedEstablishment.tempPointMarkers.forEach(marker => {
            if (window.gangsterMap.hasLayer(marker)) {
                window.gangsterMap.removeLayer(marker);
            }
        });
        selectedEstablishment.tempPointMarkers = [];
    }
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏
function disableAllMarkupModes() {
    isEstablishmentSelectionMode = false;
    isPolygonDrawingMode = false;
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –∑–∞–≤–µ–¥–µ–Ω–∏–π
    removeEstablishmentHighlighting();
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (window.gangsterMap) {
        window.gangsterMap.off('click', onEstablishmentSelection);
        window.gangsterMap.off('click', onPolygonPointAdd);
    }
}

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏
function resetMarkupState() {
    selectedEstablishment = null;
    currentPolygon = null;
    polygonPoints = [];
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —Å –∑–∞–≤–µ–¥–µ–Ω–∏–π
    removeEstablishmentHighlighting();
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function showCreateEstablishmentForm() {
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    hideCreateEstablishmentForm();
    
    const formDiv = document.createElement('div');
    formDiv.id = 'create-establishment-form';
    formDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--charcoal-black), var(--deep-black));
        border: 3px solid var(--warm-gold);
        padding: 1rem;
        border-radius: 8px;
        z-index: 1500;
        font-family: var(--font-sans);
        max-width: 195px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    `;
    
    formDiv.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.7rem;">
            <h3 style="color: var(--warm-gold); margin: 0; font-family: var(--font-serif); font-size: 1rem;">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è</h3>
            <button onclick="cancelCreateEstablishment()" style="
                background: none;
                border: none;
                color: var(--warm-gold);
                font-size: 1.2rem;
                cursor: pointer;
                padding: 0;
                width: 25px;
                height: 25px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                transition: all 0.3s ease;
            " onmouseover="this.style.background='rgba(212, 175, 55, 0.2)'" onmouseout="this.style.background='none'">√ó</button>
        </div>
        
        <div style="margin-bottom: 0.5rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.2rem; font-weight: bold; font-size: 0.8rem;">–¢–∏–ø:</label>
            <select id="new-establishment-type" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.5rem;
                font-size: 0.8rem;
            ">
                <option value="pharmacy">üè• –ê–ø—Ç–µ–∫–∞</option>
                <option value="restaurant">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω</option>
                <option value="shop">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</option>
                <option value="bar">üç∏ –ë–∞—Ä</option>
                <option value="bank">üè¶ –ë–∞–Ω–∫</option>
                <option value="gas_station">‚õΩ –ê–ó–°</option>
                <option value="hotel">üè® –û—Ç–µ–ª—å</option>
                <option value="office">üè¢ –û—Ñ–∏—Å</option>
                <option value="warehouse">üì¶ –°–∫–ª–∞–¥</option>
            </select>
        </div>
        
        <div style="margin-bottom: 0.5rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.2rem; font-weight: bold; font-size: 0.8rem;">–ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
            <input type="text" id="new-establishment-name" placeholder="–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.5rem;
                font-size: 0.8rem;
            ">
        </div>
        
        <div style="margin-bottom: 0.5rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.2rem; font-weight: bold; font-size: 0.8rem;">–î–æ—Ö–æ–¥ –≤ —á–∞—Å:</label>
            <input type="number" id="new-establishment-income" placeholder="100" value="100" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.5rem;
                font-size: 0.8rem;
            ">
        </div>
        
        <div style="margin-bottom: 0.5rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.2rem; font-weight: bold; font-size: 0.8rem;">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:</label>
            <input type="number" id="new-establishment-cost" placeholder="1000" value="1000" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 1px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.5rem;
                font-size: 0.8rem;
            ">
        </div>
        
        
        <div style="background: rgba(212, 175, 55, 0.1); border: 1px solid var(--warm-gold); padding: 0.5rem; border-radius: 4px; margin-bottom: 0.6rem;">
            <p style="color: var(--cream); font-size: 0.7rem; margin: 0; text-align: center;">
                <strong>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</strong><br>
                1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è<br>
                2. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è<br>
                3. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è<br>
                4. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ<br>
                <em>–ù–∞–∑–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</em>
            </p>
        </div>
        
        <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
            <button onclick="finishEstablishmentCreation()" id="finish-creation-btn" style="
                background: linear-gradient(45deg, #388e3c, #2e7d32);
                border: 2px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.4rem 0.8rem;
                cursor: pointer;
                font-weight: bold;
                font-size: 0.7rem;
                border-radius: 4px;
                width: 100%;
                display: none;
            ">–°–æ–∑–¥–∞—Ç—å</button>
        </div>
    `;
    
    document.body.appendChild(formDiv);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
    if (window.gangsterMap) {
        window.gangsterMap.on('click', onCreateEstablishmentClick);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    const typeSelect = document.getElementById('new-establishment-type');
    if (typeSelect) {
        typeSelect.addEventListener('change', updateCreatingEstablishmentIcon);
    }
}

// –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function hideCreateEstablishmentForm() {
    const formDiv = document.getElementById('create-establishment-form');
    if (formDiv) {
        document.body.removeChild(formDiv);
    }
    
    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
    if (window.gangsterMap) {
        window.gangsterMap.off('click', onCreateEstablishmentClick);
    }
    
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º currentCreatingEstablishment –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∑–∞–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—â–∞–µ–º—ã–º
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º)
function finishEstablishmentCreation() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
    currentCreatingEstablishment = null;
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è (–∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ")
    hideCreateEstablishmentForm();
    disableCreateEstablishmentMode();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –±–∞—Ä–µ
    const button = document.getElementById('create-establishment-btn');
    if (button) {
        button.textContent = 'üè¢ –°–æ–∑–¥–∞—Ç—å';
        button.style.background = 'linear-gradient(45deg, var(--steel-blue), var(--midnight-blue))';
    }
    
    showMessage('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.', 'success');
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function generateEstablishmentName(type) {
    establishmentCounters[type]++;
    const typeName = establishmentTypeNames[type] || type;
    return `${typeName} ${establishmentCounters[type]}`;
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function showEditEstablishmentForm(establishment) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!checkAdminAuth()) {
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    hideEditEstablishmentForm();
    
    const formDiv = document.createElement('div');
    formDiv.id = 'edit-establishment-form';
    formDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--charcoal-black), var(--deep-black));
        border: 2.535px solid var(--warm-gold);
        padding: 0.845rem;
        border-radius: 6.76px;
        z-index: 1500;
        font-family: var(--font-sans);
        max-width: 164.775px;
        box-shadow: 0 6.76px 20.28px rgba(0, 0, 0, 0.5);
    `;
    
    formDiv.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5915rem;">
            <h3 style="color: var(--warm-gold); margin: 0; font-family: var(--font-serif); font-size: 0.845rem;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è</h3>
            <button onclick="hideEditEstablishmentForm()" style="
                background: none;
                border: none;
                color: var(--warm-gold);
                font-size: 1.014rem;
                cursor: pointer;
                padding: 0;
                width: 21.125px;
                height: 21.125px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 50%;
                transition: all 0.3s ease;
            " onmouseover="this.style.background='rgba(212, 175, 55, 0.2)'" onmouseout="this.style.background='none'">√ó</button>
        </div>
        
        <div style="margin-bottom: 0.4225rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.169rem; font-weight: bold; font-size: 0.676rem;">–¢–∏–ø:</label>
            <select id="edit-establishment-type" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 0.845px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.4225rem;
                font-size: 0.676rem;
            ">
                <option value="pharmacy">üè• –ê–ø—Ç–µ–∫–∞</option>
                <option value="restaurant">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω</option>
                <option value="shop">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</option>
                <option value="bar">üç∏ –ë–∞—Ä</option>
                <option value="bank">üè¶ –ë–∞–Ω–∫</option>
                <option value="gas_station">‚õΩ –ê–ó–°</option>
                <option value="hotel">üè® –û—Ç–µ–ª—å</option>
                <option value="office">üè¢ –û—Ñ–∏—Å</option>
                <option value="warehouse">üì¶ –°–∫–ª–∞–¥</option>
            </select>
        </div>
        
        <div style="margin-bottom: 0.4225rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.169rem; font-weight: bold; font-size: 0.676rem;">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
            <input type="text" id="edit-establishment-name" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 0.845px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.4225rem;
                font-size: 0.676rem;
            ">
        </div>
        
        <div style="margin-bottom: 0.4225rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.169rem; font-weight: bold; font-size: 0.676rem;">–î–æ—Ö–æ–¥ –≤ —á–∞—Å:</label>
            <input type="number" id="edit-establishment-income" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 0.845px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.4225rem;
                font-size: 0.676rem;
            ">
        </div>
        
        <div style="margin-bottom: 0.4225rem;">
            <label style="display: block; color: var(--cream); margin-bottom: 0.169rem; font-weight: bold; font-size: 0.676rem;">–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:</label>
            <input type="number" id="edit-establishment-cost" style="
                width: 100%;
                background: rgba(46, 46, 46, 0.8);
                border: 0.845px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.4225rem;
                font-size: 0.676rem;
            ">
        </div>
        
        <div style="display: flex; gap: 0.4225rem;">
            <button onclick="saveEstablishmentChanges('${establishment.id}')" style="
                background: linear-gradient(45deg, #388e3c, #2e7d32);
                border: 1.69px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.338rem 0.676rem;
                cursor: pointer;
                font-weight: bold;
                font-size: 0.5915rem;
                border-radius: 3.38px;
                flex: 1;
            ">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            <button onclick="handleDeleteEstablishmentClick('${establishment.id}')" style="
                background: linear-gradient(45deg, #d32f2f, #b71c1c);
                border: 1.69px solid var(--warm-gold);
                color: var(--cream);
                padding: 0.338rem 0.676rem;
                cursor: pointer;
                font-weight: bold;
                font-size: 0.5915rem;
                border-radius: 3.38px;
                flex: 1;
            ">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
    `;
    
    document.body.appendChild(formDiv);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    document.getElementById('edit-establishment-type').value = establishment.type;
    document.getElementById('edit-establishment-name').value = establishment.name;
    document.getElementById('edit-establishment-income').value = establishment.income;
    document.getElementById('edit-establishment-cost').value = establishment.captureCost;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    const typeSelect = document.getElementById('edit-establishment-type');
    if (typeSelect) {
        typeSelect.addEventListener('change', function() {
            updateEstablishmentIcon(establishment);
        });
    }
}

// –°–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function hideEditEstablishmentForm() {
    const formDiv = document.getElementById('edit-establishment-form');
    if (formDiv) {
        document.body.removeChild(formDiv);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    deleteConfirmationState.establishmentId = null;
    deleteConfirmationState.confirmed = false;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏—è
function saveEstablishmentChanges(establishmentId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!checkAdminAuth()) {
        return;
    }
    
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const newType = document.getElementById('edit-establishment-type').value;
    const newName = document.getElementById('edit-establishment-name').value.trim();
    const newIncome = parseInt(document.getElementById('edit-establishment-income').value) || 100;
    const newCost = parseInt(document.getElementById('edit-establishment-cost').value) || 1000;
    
    if (!newName) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è!', 'error');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    establishment.type = newType;
    establishment.name = newName;
    establishment.income = newIncome;
    establishment.captureCost = newCost;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    updateEstablishmentIcon(establishment);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    hideEditEstablishmentForm();
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveMarkupDataToLocalStorage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π
    if (typeof updateEstablishmentSelector === 'function') {
        updateEstablishmentSelector();
    }
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${newName}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`, 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function updateEstablishmentIcon(establishment) {
    if (!establishment.marker) return;
    
    const newColor = getEstablishmentColor(establishment.type);
    const newIcon = getEstablishmentIcon(establishment.type);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞
    const iconSize = getIconSizeForZoom(currentZoom);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∑–∞—Ç–µ–º —É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –∑–∞—Ç–µ–º —É —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    const territoryColor = establishment.owner ? establishment.owner.color : 
                          (establishment.territory ? establishment.territory.color : newColor);
    const icon = L.divIcon({
        html: `
            <div style="
                background: linear-gradient(135deg, ${territoryColor}, #ffffff);
                border: 4px solid ${establishment.owner ? establishment.owner.color : 'var(--warm-gold)'};
                border-radius: 50%;
                width: ${iconSize.size}px;
                height: ${iconSize.size}px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--deep-black);
                font-weight: bold;
                font-size: ${Math.round(iconSize.size * 0.47)}px;
                box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
            ">
                ${newIcon}
            </div>
        `,
        iconSize: [iconSize.size, iconSize.size],
        iconAnchor: [iconSize.anchor, iconSize.anchor],
        className: 'markup-establishment-marker'
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞
    establishment.marker.setIcon(icon);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
function handleDeleteEstablishmentClick(establishmentId) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
    if (deleteConfirmationState.establishmentId !== establishmentId) {
        deleteConfirmationState.establishmentId = establishmentId;
        deleteConfirmationState.confirmed = false;
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const deleteBtn = document.querySelector(`button[onclick*="${establishmentId}"]`);
        if (deleteBtn) {
            deleteBtn.textContent = '–ù–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ';
            deleteBtn.style.background = 'linear-gradient(45deg, #ff6b35, #ff8c42)';
        }
        
        showMessage('–ù–∞–∂–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', 'warning');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (deleteConfirmationState.establishmentId === establishmentId && !deleteConfirmationState.confirmed) {
                deleteConfirmationState.establishmentId = null;
                deleteConfirmationState.confirmed = false;
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
                const deleteBtn = document.querySelector(`button[onclick*="${establishmentId}"]`);
                if (deleteBtn) {
                    deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
                    deleteBtn.style.background = 'linear-gradient(45deg, #d32f2f, #b71c1c)';
                }
            }
        }, 3000);
        
    } else {
        // –í—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        deleteConfirmationState.confirmed = true;
        actuallyDeleteEstablishment(establishmentId);
    }
}

// –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function actuallyDeleteEstablishment(establishmentId) {
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç—ã
    if (establishment.marker) {
        window.gangsterMap.removeLayer(establishment.marker);
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (establishment.polygon) {
        window.gangsterMap.removeLayer(establishment.polygon);
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    const index = currentMarkupData.establishments.findIndex(e => e.id === establishmentId);
    if (index > -1) {
        currentMarkupData.establishments.splice(index, 1);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    hideEditEstablishmentForm();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    deleteConfirmationState.establishmentId = null;
    deleteConfirmationState.confirmed = false;
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveMarkupDataToLocalStorage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π
    if (typeof updateEstablishmentSelector === 'function') {
        updateEstablishmentSelector();
    }
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" —É–¥–∞–ª–µ–Ω–æ!`, 'success');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞
function updateCreatingEstablishmentIcon() {
    if (!currentCreatingEstablishment || !currentCreatingEstablishment.marker) return;
    
    const typeSelect = document.getElementById('new-establishment-type');
    if (!typeSelect) return;
    
    const newType = typeSelect.value;
    const newIcon = getEstablishmentIcon(newType);
    const newColor = getEstablishmentColor(newType);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    currentCreatingEstablishment.type = newType;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ
    const nameInput = document.getElementById('new-establishment-name');
    if (nameInput && !nameInput.value.trim()) {
        const autoName = generateEstablishmentName(newType);
        currentCreatingEstablishment.name = autoName;
        nameInput.value = autoName;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
    const territoryColor = currentCreatingEstablishment.territory ? currentCreatingEstablishment.territory.color : newColor;
    const icon = L.divIcon({
        html: `
            <div style="
                background: linear-gradient(135deg, ${territoryColor}, #ffffff);
                border: 4px solid var(--warm-gold);
                border-radius: 50%;
                width: 45px;
                height: 45px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--deep-black);
                font-weight: bold;
                font-size: 21px;
                box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
            ">
                ${newIcon}
            </div>
        `,
        iconSize: [45, 45],
        iconAnchor: [22.5, 22.5],
        className: 'markup-establishment-marker'
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞
    currentCreatingEstablishment.marker.setIcon(icon);
    
    console.log(`–ò–∫–æ–Ω–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–∏–ø: ${newType}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function onCreateEstablishmentClick(e) {
    if (!isCreateEstablishmentMode) return;
    
    const lat = e.latlng.lat;
    const lng = e.latlng.lng;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const type = document.getElementById('new-establishment-type').value;
    let name = document.getElementById('new-establishment-name').value.trim();
    const income = parseInt(document.getElementById('new-establishment-income').value) || 100;
    const cost = parseInt(document.getElementById('new-establishment-cost').value) || 1000;
    
    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!name) {
        name = generateEstablishmentName(type);
        document.getElementById('new-establishment-name').value = name;
    }
    
    console.log('onCreateEstablishmentClick:', {
        currentCreatingEstablishment: currentCreatingEstablishment,
        coords: [lat, lng],
        name: name
    });
    
    if (currentCreatingEstablishment) {
        // –ï—Å–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ
        console.log('–ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ');
        currentCreatingEstablishment.coords = [lat, lng];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
        if (currentCreatingEstablishment.marker) {
            currentCreatingEstablishment.marker.setLatLng([lat, lng]);
            console.log('–ú–∞—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
        } else {
            console.log('–ú–∞—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
        
        showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ`, 'info');
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ');
    const establishment = {
        id: `admin_${type}_${Date.now()}`,
        name: name,
        type: type,
        coords: [lat, lng],
        income: income,
        captureCost: cost,
            territory: null, // –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ç–∫—É
            marker: null // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
    };
    
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–µ—Ä
        const marker = addMarkupEstablishment(establishment);
        establishment.marker = marker;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
    currentMarkupData.establishments.push(establishment);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        currentCreatingEstablishment = establishment;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
        console.log('–ó–∞–≤–µ–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', establishment);
        showMessage(`–°–æ–∑–¥–∞–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: ${name}. –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.`, 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        const finishBtn = document.getElementById('finish-creation-btn');
        if (finishBtn) {
            finishBtn.style.display = 'block';
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
let isCreatingEstablishment = false;
let tempEstablishmentMarker = null;
let tempEstablishmentArrows = [];
let tempEstablishmentData = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è
let currentCreatingEstablishment = null;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
let deleteConfirmationState = {
    establishmentId: null,
    confirmed: false
};

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏–π
const establishmentCounters = {
    'pharmacy': 0,
    'restaurant': 0,
    'shop': 0,
    'bar': 0,
    'bank': 0,
    'gas_station': 0,
    'hotel': 0,
    'office': 0,
    'warehouse': 0
};

// –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
const establishmentTypeNames = {
    'pharmacy': '–ê–ø—Ç–µ–∫–∞',
    'restaurant': '–†–µ—Å—Ç–æ—Ä–∞–Ω',
    'shop': '–ú–∞–≥–∞–∑–∏–Ω',
    'bar': '–ë–∞—Ä',
    'bank': '–ë–∞–Ω–∫',
    'gas_station': '–ê–ó–°',
    'hotel': '–û—Ç–µ–ª—å',
    'office': '–û—Ñ–∏—Å',
    'warehouse': '–°–∫–ª–∞–¥'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∑–¥–µ—Å—å")
function createEstablishmentAtPosition() {
    console.log('createEstablishmentAtPosition called');
    console.log('window.gangsterMap:', window.gangsterMap);
    
    if (!window.gangsterMap) {
        console.error('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ window.gangsterMap');
        showMessage('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'error');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const type = document.getElementById('new-establishment-type').value;
    const name = document.getElementById('new-establishment-name').value.trim();
    const income = parseInt(document.getElementById('new-establishment-income').value) || 100;
    const cost = parseInt(document.getElementById('new-establishment-cost').value) || 1000;
    
    if (!name) {
        showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è!', 'error');
        return;
    }
    
    if (isCreatingEstablishment) {
        // –ï—Å–ª–∏ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        finalizeEstablishmentCreation();
        return;
    }
    
    const center = window.gangsterMap.getCenter();
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
    isCreatingEstablishment = true;
    showMessage('–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–¥–µ—Å—å"', 'info');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏—è
    const iconSize = getIconSizeForZoom(currentZoom);
    const establishmentColor = getEstablishmentColor(type);
    const establishmentIcon = getEstablishmentIcon(type);
    
    const tempIcon = L.divIcon({
        html: `
            <div style="
                background: linear-gradient(135deg, ${establishmentColor}, #ffffff);
                border: 4px solid var(--warm-gold);
                border-radius: 50%;
                width: ${iconSize.size}px;
                height: ${iconSize.size}px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--deep-black);
                font-weight: bold;
                font-size: ${Math.round(iconSize.size * 0.47)}px;
                box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
                opacity: 0.8;
            ">
                ${establishmentIcon}
            </div>
        `,
        iconSize: [iconSize.size, iconSize.size],
        iconAnchor: [iconSize.anchor, iconSize.anchor],
        className: 'temp-establishment-marker'
    });
    
    tempEstablishmentMarker = L.marker([center.lat, center.lng], {
        icon: tempIcon,
        draggable: true,
        opacity: 0.8
    }).addTo(window.gangsterMap);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –≤–æ–∫—Ä—É–≥ –º–∞—Ä–∫–µ—Ä–∞
    addMovementArrows(tempEstablishmentMarker);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    tempEstablishmentData = {
        type: type,
        name: name,
        income: income,
        captureCost: cost
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    window.gangsterMap.on('mousemove', updateTempMarkerPosition);
    window.gangsterMap.on('click', updateTempMarkerPosition);
    window.gangsterMap.on('contextmenu', cancelEstablishmentCreation);
    
    // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –∫–∞—Ä—Ç—ã
    window.gangsterMap.getContainer().style.cursor = 'crosshair';
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–°–æ–∑–¥–∞—Ç—å –∑–¥–µ—Å—å"
    const createBtn = document.querySelector('button[onclick="createEstablishmentAtPosition()"]');
    if (createBtn) {
        createBtn.innerHTML = '–°–æ–∑–¥–∞—Ç—å –∑–¥–µ—Å—å';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏
function updateTempMarkerPosition(e) {
    if (tempEstablishmentMarker && isCreatingEstablishment) {
        tempEstablishmentMarker.setLatLng(e.latlng);
        updateMovementArrows(tempEstablishmentMarker);
    }
}

// –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function finalizeEstablishmentCreation(e = null) {
    if (!isCreatingEstablishment || !tempEstablishmentMarker) return;
    
    const coords = e ? e.latlng : tempEstablishmentMarker.getLatLng();
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
    const establishment = {
        id: `admin_${tempEstablishmentData.type}_${Date.now()}`,
        name: tempEstablishmentData.name,
        type: tempEstablishmentData.type,
        coords: [coords.lat, coords.lng],
        income: tempEstablishmentData.income,
        captureCost: tempEstablishmentData.captureCost,
        territory: null
    };
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    window.gangsterMap.removeLayer(tempEstablishmentMarker);
    removeMovementArrows();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç—É
    console.log('–°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ:', establishment);
    addMarkupEstablishment(establishment);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∞–Ω–Ω—ã–µ
    currentMarkupData.establishments.push(establishment);
    console.log('–ó–∞–≤–µ–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ currentMarkupData. –í—Å–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π:', currentMarkupData.establishments.length);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
    cleanupEstablishmentCreation();
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('new-establishment-name').value = '';
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saveMarkupDataToLocalStorage();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
    if (window.githubSyncService && window.githubSyncService.githubToken) {
        console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –æ–±–ª–∞–∫–æ–º...');
        window.githubSyncService.syncToGist().then(() => {
            console.log('–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º');
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
        });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π
    if (typeof updateEstablishmentSelector === 'function') {
        updateEstablishmentSelector();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setTimeout(() => {
        const savedData = localStorage.getItem('gangsters_markup_data');
        if (savedData) {
            const data = JSON.parse(savedData);
            console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –≤ localStorage ${data.establishments.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π`);
        }
    }, 100);
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" —Å–æ–∑–¥–∞–Ω–æ!`, 'success');
}

// –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function cancelEstablishmentCreation(e) {
    if (!isCreatingEstablishment) return;
    
    e.preventDefault();
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    if (tempEstablishmentMarker) {
        window.gangsterMap.removeLayer(tempEstablishmentMarker);
    }
    removeMovementArrows();
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
    cleanupEstablishmentCreation();
    
    showMessage('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', 'info');
}

// –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è
function cleanupEstablishmentCreation() {
    isCreatingEstablishment = false;
    tempEstablishmentMarker = null;
    tempEstablishmentData = null;
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    window.gangsterMap.off('mousemove', updateTempMarkerPosition);
    window.gangsterMap.off('click', updateTempMarkerPosition);
    window.gangsterMap.off('contextmenu', cancelEstablishmentCreation);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    window.gangsterMap.getContainer().style.cursor = '';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
    const createBtn = document.querySelector('button[onclick="createEstablishmentAtPosition()"]');
    if (createBtn) {
        createBtn.innerHTML = '–°–æ–∑–¥–∞—Ç—å –∑–¥–µ—Å—å';
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –º–∞—Ä–∫–µ—Ä–∞
function addMovementArrows(marker) {
    const latlng = marker.getLatLng();
    
    // –°–æ–∑–¥–∞–µ–º 4 —Å—Ç—Ä–µ–ª–∫–∏ (–≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ)
    const arrowPositions = [
        [latlng.lat + 0.0005, latlng.lng, '‚Üë'], // –≤–≤–µ—Ä—Ö
        [latlng.lat - 0.0005, latlng.lng, '‚Üì'], // –≤–Ω–∏–∑
        [latlng.lat, latlng.lng - 0.0005, '‚Üê'], // –≤–ª–µ–≤–æ
        [latlng.lat, latlng.lng + 0.0005, '‚Üí']  // –≤–ø—Ä–∞–≤–æ
    ];
    
    arrowPositions.forEach(([lat, lng, symbol]) => {
        const arrow = L.marker([lat, lng], {
            icon: L.divIcon({
                className: 'movement-arrow',
                html: `<div style="
                    background: rgba(212, 175, 55, 0.8);
                    border: 2px solid var(--warm-gold);
                    border-radius: 50%;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color: var(--deep-black);
                    font-weight: bold;
                    font-size: 16px;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
                ">${symbol}</div>`,
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            })
        }).addTo(window.gangsterMap);
        
        tempEstablishmentArrows.push(arrow);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–æ–∫
function updateMovementArrows(marker) {
    if (tempEstablishmentArrows.length === 0) return;
    
    const latlng = marker.getLatLng();
    const arrowPositions = [
        [latlng.lat + 0.0005, latlng.lng],
        [latlng.lat - 0.0005, latlng.lng],
        [latlng.lat, latlng.lng - 0.0005],
        [latlng.lat, latlng.lng + 0.0005]
    ];
    
    tempEstablishmentArrows.forEach((arrow, index) => {
        arrow.setLatLng(arrowPositions[index]);
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–æ–∫ –¥–≤–∏–∂–µ–Ω–∏—è
function removeMovementArrows() {
    tempEstablishmentArrows.forEach(arrow => {
        window.gangsterMap.removeLayer(arrow);
    });
    tempEstablishmentArrows = [];
}

// –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function cancelCreateEstablishment() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
    currentCreatingEstablishment = null;
    
    hideCreateEstablishmentForm();
    disableCreateEstablishmentMode();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    const button = document.getElementById('create-establishment-btn');
    if (button) {
        button.textContent = 'üè¢ –°–æ–∑–¥–∞—Ç—å';
        button.style.background = 'linear-gradient(45deg, var(--steel-blue), var(--midnight-blue))';
    }
    
    showMessage('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.', 'info');
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
function disableCreateEstablishmentMode() {
    isCreateEstablishmentMode = false;
    
    // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤
    if (window.gangsterMap) {
        window.gangsterMap.off('click', onCreateEstablishmentClick);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
function toggleDeleteEstablishmentMode() {
    if (!checkAdminAuth()) {
        showMessage('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error');
        return;
    }

    isDeleteEstablishmentMode = !isDeleteEstablishmentMode;
    const button = document.getElementById('delete-establishment-btn');
    
    if (isDeleteEstablishmentMode) {
        button.textContent = '‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ';
        button.style.background = 'linear-gradient(45deg, #2d5016, #1e3a0a)';
        showMessage('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω! –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', 'warning');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π
        if (window.gangsterMap) {
            window.gangsterMap.on('click', onDeleteEstablishmentSelection);
        }
    } else {
        button.textContent = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å';
        button.style.background = 'linear-gradient(45deg, var(--concrete), var(--dark-concrete))';
        showMessage('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.', 'info');
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (window.gangsterMap) {
            window.gangsterMap.off('click', onDeleteEstablishmentSelection);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
function onDeleteEstablishmentSelection(e) {
    if (!isDeleteEstablishmentMode) return;
    
    const clickedLat = e.latlng.lat;
    const clickedLng = e.latlng.lng;
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–¥–∏—É—Å–µ 50 –º–µ—Ç—Ä–æ–≤
    let nearestEstablishment = null;
    let minDistance = Infinity;
    
    currentMarkupData.establishments.forEach(establishment => {
        const distance = calculateDistance(
            clickedLat, clickedLng,
            establishment.coords[0], establishment.coords[1]
        );
        
        if (distance < 50 && distance < minDistance) {
            minDistance = distance;
            nearestEstablishment = establishment;
        }
    });
    
    if (nearestEstablishment) {
        selectedForDeleteEstablishment = nearestEstablishment;
        showDeleteConfirmation(nearestEstablishment);
    } else {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è! –ö–ª–∏–∫–Ω–∏—Ç–µ —Ä—è–¥–æ–º —Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º.', 'warning');
    }
}

// –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function showDeleteConfirmation(establishment) {
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(10, 10, 10, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2500;
        font-family: var(--font-sans);
    `;
    
    modal.innerHTML = `
        <div style="
            background: linear-gradient(135deg, var(--charcoal-black), var(--deep-black));
            border: 3px solid #ff4757;
            padding: 2rem;
            max-width: 400px;
            text-align: center;
            position: relative;
            border-radius: 8px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
        ">
            <h3 style="color: #ff4757; font-family: var(--font-serif); margin-bottom: 1rem;">‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è</h3>
            <p style="color: var(--cream); margin-bottom: 0.5rem;"><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${establishment.name}</p>
            <p style="color: var(--cream); margin-bottom: 0.5rem;"><strong>–¢–∏–ø:</strong> ${establishment.type}</p>
            <p style="color: var(--cream); margin-bottom: 1rem;"><strong>–î–æ—Ö–æ–¥:</strong> $${establishment.income}/—á–∞—Å</p>
            
            <div style="background: rgba(255, 71, 87, 0.1); border: 1px solid #ff4757; padding: 1rem; border-radius: 4px; margin-bottom: 1.5rem;">
                <p style="color: var(--cream); font-size: 0.9rem; margin: 0;">
                    <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong><br>
                    –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.<br>
                    –ó–∞–≤–µ–¥–µ–Ω–∏–µ –∏ –µ–≥–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.
                </p>
            </div>
            
            <div style="display: flex; gap: 1rem; justify-content: center;">
                <button onclick="confirmDeleteEstablishment('${establishment.id}')" style="
                    background: linear-gradient(45deg, #ff4757, #c44569);
                    border: 2px solid #ff4757;
                    color: white;
                    padding: 0.75rem 1.5rem;
                    cursor: pointer;
                    font-weight: bold;
                    border-radius: 4px;
                ">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                <button onclick="cancelDeleteEstablishment()" style="
                    background: linear-gradient(45deg, var(--concrete), var(--dark-concrete));
                    border: 2px solid var(--warm-gold);
                    color: var(--cream);
                    padding: 0.75rem 1.5rem;
                    cursor: pointer;
                    font-weight: bold;
                    border-radius: 4px;
                ">–û—Ç–º–µ–Ω–∞</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function confirmDeleteEstablishment(establishmentId) {
    const establishment = currentMarkupData.establishments.find(e => e.id === establishmentId);
    if (!establishment) return;
    
    // –£–¥–∞–ª—è–µ–º —Å –∫–∞—Ä—Ç—ã
    if (establishment.marker && window.gangsterMap) {
        window.gangsterMap.removeLayer(establishment.marker);
    }
    if (establishment.polygon && window.gangsterMap) {
        window.gangsterMap.removeLayer(establishment.polygon);
    }
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    const index = currentMarkupData.establishments.findIndex(e => e.id === establishmentId);
    if (index > -1) {
        currentMarkupData.establishments.splice(index, 1);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateMarkupStats();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.querySelector('[style*="z-index: 2500"]');
    if (modal) {
        document.body.removeChild(modal);
    }
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${establishment.name}" —É–¥–∞–ª–µ–Ω–æ!`, 'success');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
    toggleDeleteEstablishmentMode();
}

// –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
function cancelDeleteEstablishment() {
    const modal = document.querySelector('[style*="z-index: 2500"]');
    if (modal) {
        document.body.removeChild(modal);
    }
    
    selectedForDeleteEstablishment = null;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π
function toggleMoveEstablishmentMode() {
    if (!checkAdminAuth()) {
        showMessage('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', 'error');
        return;
    }

    isMoveEstablishmentMode = !isMoveEstablishmentMode;
    const button = document.getElementById('move-establishment-btn');
    
    if (isMoveEstablishmentMode) {
        button.textContent = '‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ';
        button.style.background = 'linear-gradient(45deg, #2d5016, #1e3a0a)';
        showMessage('–†–µ–∂–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω! –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.', 'info');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π
        if (window.gangsterMap) {
            window.gangsterMap.on('click', onMoveEstablishmentSelection);
        }
    } else {
        button.textContent = 'üìå –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å';
        button.style.background = 'linear-gradient(45deg, var(--warm-gold), var(--copper))';
        showMessage('–†–µ–∂–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω.', 'info');
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (window.gangsterMap) {
            window.gangsterMap.off('click', onMoveEstablishmentSelection);
            window.gangsterMap.off('click', onMoveEstablishmentPlacement);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
function onMoveEstablishmentSelection(e) {
    if (!isMoveEstablishmentMode) return;
    
    const clickedLat = e.latlng.lat;
    const clickedLng = e.latlng.lng;
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–¥–∏—É—Å–µ 50 –º–µ—Ç—Ä–æ–≤
    let nearestEstablishment = null;
    let minDistance = Infinity;
    
    currentMarkupData.establishments.forEach(establishment => {
        const distance = calculateDistance(
            clickedLat, clickedLng,
            establishment.coords[0], establishment.coords[1]
        );
        
        if (distance < 50 && distance < minDistance) {
            minDistance = distance;
            nearestEstablishment = establishment;
        }
    });
    
    if (nearestEstablishment) {
        selectedForMoveEstablishment = nearestEstablishment;
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
        highlightEstablishmentForMove(nearestEstablishment);
        
        showMessage(`–í—ã–±—Ä–∞–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: ${nearestEstablishment.name}. –¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.`, 'success');
        
        // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        window.gangsterMap.off('click', onMoveEstablishmentSelection);
        window.gangsterMap.on('click', onMoveEstablishmentPlacement);
    } else {
        showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è! –ö–ª–∏–∫–Ω–∏—Ç–µ —Ä—è–¥–æ–º —Å –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º.', 'warning');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
function onMoveEstablishmentPlacement(e) {
    if (!selectedForMoveEstablishment) return;
    
    const newLat = e.latlng.lat;
    const newLng = e.latlng.lng;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è
    selectedForMoveEstablishment.coords = [newLat, newLng];
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç—ã
    if (selectedForMoveEstablishment.marker && window.gangsterMap) {
        window.gangsterMap.removeLayer(selectedForMoveEstablishment.marker);
    }
    if (selectedForMoveEstablishment.polygon && window.gangsterMap) {
        window.gangsterMap.removeLayer(selectedForMoveEstablishment.polygon);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
    selectedForMoveEstablishment.territory.polygon = generateTerritoryPolygon(
        newLat, newLng, selectedForMoveEstablishment.type
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
    addMarkupEstablishment(selectedForMoveEstablishment);
    
    showMessage(`–ó–∞–≤–µ–¥–µ–Ω–∏–µ "${selectedForMoveEstablishment.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ!`, 'success');
    
    // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    toggleMoveEstablishmentMode();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    selectedForMoveEstablishment = null;
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
function highlightEstablishmentForMove(establishment) {
    if (!establishment.marker || !window.gangsterMap) return;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    const highlightMarker = L.circleMarker(establishment.coords, {
        radius: 25,
        fillColor: '#ffff00',
        fillOpacity: 0.3,
        color: '#ffff00',
        weight: 3,
        opacity: 0.8,
        className: 'move-highlight'
    }).addTo(window.gangsterMap);
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        if (window.gangsterMap) {
            window.gangsterMap.removeLayer(highlightMarker);
        }
    }, 3000);
}

// –î—É–±–ª–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è calculateDistance –≤—ã—à–µ

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
function generateTerritoryPolygon(lat, lng, type) {
    // –†–∞–∑–º–µ—Ä —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    const sizeMap = {
        'pharmacy': 0.0005,      // ~50 –º–µ—Ç—Ä–æ–≤
        'restaurant': 0.0008,    // ~80 –º–µ—Ç—Ä–æ–≤
        'shop': 0.0006,          // ~60 –º–µ—Ç—Ä–æ–≤
        'bar': 0.0007,           // ~70 –º–µ—Ç—Ä–æ–≤
        'bank': 0.001,           // ~100 –º–µ—Ç—Ä–æ–≤
        'gas_station': 0.0012    // ~120 –º–µ—Ç—Ä–æ–≤
    };
    
    const size = sizeMap[type] || 0.0005;
    
    return [
        [lat + size, lng - size], // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
        [lat + size, lng + size], // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
        [lat - size, lng + size], // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
        [lat - size, lng - size], // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
        [lat + size, lng - size]  // –ó–∞–º—ã–∫–∞–Ω–∏–µ
    ];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function getEstablishmentColor(type) {
    const colorMap = {
        'pharmacy': '#d4af37',
        'restaurant': '#8b2635',
        'shop': '#3a4a5a',
        'bar': '#b87333',
        'bank': '#2d5016',
        'gas_station': '#4a148c',
        'hotel': '#6a1b9a',
        'office': '#1976d2',
        'warehouse': '#388e3c'
    };
    
    return colorMap[type] || '#d4af37';
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—É
function addMarkupEstablishment(establishment) {
    if (!window.gangsterMap) return null;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞
    const iconSize = getIconSizeForZoom(currentZoom);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∑–∞—Ç–µ–º —É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏, –∑–∞—Ç–µ–º —É —Ç–∏–ø–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    console.log('addMarkupEstablishment - –∑–∞–≤–µ–¥–µ–Ω–∏–µ:', establishment.name, '–≤–ª–∞–¥–µ–ª–µ—Ü:', establishment.owner);
    const territoryColor = establishment.owner ? establishment.owner.color : 
                          (establishment.territory ? establishment.territory.color : getEstablishmentColor(establishment.type));
    console.log('addMarkupEstablishment - —Ü–≤–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:', territoryColor);
    const icon = L.divIcon({
        html: `
            <div style="
                background: linear-gradient(135deg, ${territoryColor}, #ffffff);
                border: 4px solid ${establishment.owner ? establishment.owner.color : 'var(--warm-gold)'};
                border-radius: 50%;
                width: ${iconSize.size}px;
                height: ${iconSize.size}px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: var(--deep-black);
                font-weight: bold;
                font-size: ${Math.round(iconSize.size * 0.47)}px;
                box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
            ">
                ${getEstablishmentIcon(establishment.type)}
            </div>
        `,
        iconSize: [iconSize.size, iconSize.size],
        iconAnchor: [iconSize.anchor, iconSize.anchor],
        className: 'markup-establishment-marker'
    });
    
    const marker = L.marker(establishment.coords, { icon }).addTo(window.gangsterMap);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    marker.on('click', function(e) {
        if (isEstablishmentSelectionMode) {
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞–µ–º —ç—Ç–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
            selectedEstablishment = establishment;
            isEstablishmentSelectionMode = false;
            isPolygonDrawingMode = true;
            
            showTerritoryMarkupNotification(`–†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è: ${establishment.name}. –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.`);
            
            // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π
            window.gangsterMap.off('click', onEstablishmentSelection);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            startPolygonDrawing();
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            e.originalEvent.stopPropagation();
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–º–µ—Ç–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (checkAdminAuth()) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                showEditEstablishmentForm(establishment);
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—Ö–≤–∞—Ç–∞ –∏ –ø–æ–∫—É–ø–∫–∏
                showCapturePopup(establishment);
            }
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            e.originalEvent.stopPropagation();
        }
    });
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    let polygon = null;
    if (establishment.territory && establishment.territory.polygon) {
        polygon = L.polygon(establishment.territory.polygon, {
            fillColor: establishment.territory.color,
            fillOpacity: establishment.territory.opacity,
            color: establishment.territory.color,
            weight: 2,
            opacity: 0.8,
            dashArray: '5, 5',
            className: 'markup-territory-polygon'
        }).addTo(window.gangsterMap);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤ —Ä–µ–∂–∏–º–µ –∏–≥—Ä–æ–∫–∞
        polygon.on('click', function(e) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const user = typeof currentUser === 'function' ? currentUser() : currentUser;
            if (user && user.name === 'admin') {
                return; // –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞—Ö–≤–∞—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –∫–∞—Ä—Ç—ã)
            showCapturePopup(establishment);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            e.originalEvent.stopPropagation();
        });
    }
    
    // Popup —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ showCapturePopup() –ø—Ä–∏ –∫–ª–∏–∫–µ
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (establishment.owner && establishment.polygon) {
        addOwnerLabelToTerritory(establishment);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
    establishment.marker = marker;
    establishment.polygon = polygon;
    
    return marker;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
function getEstablishmentIcon(type) {
    const iconMap = {
        'pharmacy': 'üè•',
        'restaurant': 'üçΩÔ∏è',
        'shop': 'üõçÔ∏è',
        'bar': 'üç∏',
        'bank': 'üè¶',
        'gas_station': '‚õΩ',
        'hotel': 'üè®',
        'office': 'üè¢',
        'warehouse': 'üì¶'
    };
    
    return iconMap[type] || 'üìç';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateMarkupStats() {
    const statsContainer = document.getElementById('markup-stats');
    if (!statsContainer) return;
    
    statsContainer.innerHTML = `
        <p>–ó–∞–≤–µ–¥–µ–Ω–∏–π: ${currentMarkupData.establishments.length}</p>
        <p>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π: ${currentMarkupData.territories.length}</p>
        <p>–†–∞–π–æ–Ω–æ–≤: ${currentMarkupData.districts.length}</p>
    `;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ localStorage
function saveMarkupDataToLocalStorage() {
    try {
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏...', currentMarkupData);
        
        const dataToSave = {
            establishments: currentMarkupData.establishments.map(establishment => {
                console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ:', establishment.name, '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:', establishment.territory);
                return {
                    id: establishment.id,
                    name: establishment.name,
                    type: establishment.type,
                    coords: establishment.coords,
                    income: establishment.income,
                    captureCost: establishment.captureCost,
                    owner: establishment.owner,
                    territory: establishment.territory,
                    // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
                    marker: null,
                    polygon: null,
                    tempPointMarkers: null
                };
            }),
            territories: currentMarkupData.territories || []
        };
        
        console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', dataToSave);
        console.log('–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏:', dataToSave.establishments.filter(e => e.owner));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('gangsters_markup_data', JSON.stringify(dataToSave));
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        window.currentMarkupData = currentMarkupData;
        
        console.log(`–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage. –ó–∞–≤–µ–¥–µ–Ω–∏–π: ${dataToSave.establishments.length}, —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏: ${dataToSave.establishments.filter(e => e.owner).length}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof showMessage === 'function') {
            showMessage(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${dataToSave.establishments.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π`, 'success');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
        if (typeof showMessage === 'function') {
            showMessage('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–∑ localStorage
function loadMarkupDataFromLocalStorage() {
    try {
        const savedData = localStorage.getItem('gangsters_markup_data');
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', savedData);
        
        if (savedData) {
            const data = JSON.parse(savedData);
            console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è
            if (data.establishments && Array.isArray(data.establishments)) {
                console.log(`–ù–∞–π–¥–µ–Ω–æ ${data.establishments.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
                
                // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                if (currentMarkupData.establishments) {
                    currentMarkupData.establishments.forEach(establishment => {
                        if (establishment.marker && window.gangsterMap) {
                            window.gangsterMap.removeLayer(establishment.marker);
                        }
                        if (establishment.polygon && window.gangsterMap) {
                            window.gangsterMap.removeLayer(establishment.polygon);
                        }
                    });
                }
                currentMarkupData.establishments = [];
                
                data.establishments.forEach(establishmentData => {
                    // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
                    if (window.gangsterMap && establishmentData.coords) {
                        console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ:', establishmentData.name, '–í–ª–∞–¥–µ–ª–µ—Ü:', establishmentData.owner);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü
                        if (establishmentData.owner) {
                            console.log('–ó–∞–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:', establishmentData.owner.name, '–¶–≤–µ—Ç:', establishmentData.owner.color);
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        currentMarkupData.establishments.push(establishmentData);
                        
                        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
                        addMarkupEstablishment(establishmentData);
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è:', establishmentData.name, '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è:', establishmentData.territory);
                        if (establishmentData.territory && establishmentData.territory.polygon) {
                            console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è:', establishmentData.name);
                            const lastEstablishment = currentMarkupData.establishments[currentMarkupData.establishments.length - 1];
                            if (lastEstablishment) {
                                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
                                const territoryPolygon = L.polygon(establishmentData.territory.polygon, {
                                    fillColor: establishmentData.territory.color,
                                    fillOpacity: establishmentData.territory.opacity || 0.3,
                                    color: establishmentData.territory.color,
                                    weight: 2,
                                    opacity: 0.8,
                                    className: 'final-territory-polygon'
                                }).addTo(window.gangsterMap);
                                
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
                                lastEstablishment.polygon = territoryPolygon;
                                
                                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                                if (establishmentData.owner) {
                                    addOwnerLabelToTerritory(lastEstablishment);
                                }
                                
                                console.log('–ü–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è:', establishmentData.name);
                            }
                        } else {
                            console.log('–ù–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è:', establishmentData.name);
                        }
                    }
                });
                
                updateMarkupStats();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π
                if (typeof updateEstablishmentSelector === 'function') {
                    updateEstablishmentSelector();
                }
                
                if (data.establishments.length > 0) {
                    showMessage(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.establishments.length} –∑–∞–≤–µ–¥–µ–Ω–∏–π`, 'success');
                }
                console.log('–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                window.currentMarkupData = currentMarkupData;
            }
        } else {
            console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
        if (typeof showMessage === 'function') {
            showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏
function saveMarkupData() {
    const dataStr = JSON.stringify(currentMarkupData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = 'moscow_territories_markup.json';
    link.click();
    
    showMessage('–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏
function loadMarkupData() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = function(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = JSON.parse(e.target.result);
                currentMarkupData = data;
                
                // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                clearMarkupFromMap();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É
                data.establishments.forEach(establishment => {
                    addMarkupEstablishment(establishment);
                });
                
                updateMarkupStats();
                showMessage('–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', 'success');
            } catch (error) {
                showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞!', 'error');
            }
        };
        
        reader.readAsText(file);
    };
    
    input.click();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportMarkupData() {
    const exportData = {
        timestamp: new Date().toISOString(),
        admin: 'admin',
        version: '1.0',
        data: currentMarkupData
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `moscow_territories_export_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showMessage('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏
function clearAllMarkup() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏?')) {
        clearMarkupFromMap();
        currentMarkupData = {
            establishments: [],
            territories: [],
            districts: []
        };
        updateMarkupStats();
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        saveMarkupDataToLocalStorage();
        
        showMessage('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –æ—á–∏—â–µ–Ω—ã!', 'success');
    }
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ä—Ç—ã
function clearMarkupFromMap() {
    if (!window.gangsterMap) return;
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–º–µ—Ç–∫–∏
    window.gangsterMap.eachLayer(function(layer) {
        if (layer instanceof L.Marker && layer.options.icon && 
            layer.options.icon.options.className === 'markup-establishment-marker') {
            window.gangsterMap.removeLayer(layer);
        }
        if (layer instanceof L.Polygon && 
            layer.options.className === 'markup-territory-polygon') {
            window.gangsterMap.removeLayer(layer);
        }
    });
}

// –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–¥–∞–ª–µ–Ω–∞ - –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π –±–∞—Ä

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ç–∫–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
function showTerritoryMarkupNotification(message) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    hideTerritoryMarkupNotification();
    
    const notification = document.createElement('div');
    notification.id = 'territory-markup-notification';
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Å—Ç–µ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
    const bottomPosition = 20 + (window.messageStack || 0) * 60; // 60px –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    notification.style.cssText = `
        position: fixed;
        bottom: ${bottomPosition}px;
        left: 20px;
        background: linear-gradient(135deg, var(--brick-red), var(--dark-brick));
        border: 1px solid var(--warm-gold);
        padding: 0.375rem 0.75rem;
        border-radius: 4px;
        color: var(--cream);
        font-family: var(--font-sans);
        font-weight: bold;
        font-size: 0.45rem;
        z-index: 1500;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        text-align: center;
        max-width: 250px;
        animation: slideInLeft 0.3s ease;
    `;
    
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5rem;">
            <span>üéØ</span>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(notification);
}

// –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–º–µ—Ç–∫–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
function hideTerritoryMarkupNotification() {
    const notification = document.getElementById('territory-markup-notification');
    if (notification) {
        notification.remove();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
window.toggleMarkupMode = toggleMarkupMode;
window.toggleCreateEstablishmentMode = toggleCreateEstablishmentMode;
window.toggleDeleteEstablishmentMode = toggleDeleteEstablishmentMode;
window.toggleMoveEstablishmentMode = toggleMoveEstablishmentMode;
window.createEstablishmentAtPosition = createEstablishmentAtPosition;
window.onCreateEstablishmentClick = onCreateEstablishmentClick;
window.cancelCreateEstablishment = cancelCreateEstablishment;
window.finishEstablishmentCreation = finishEstablishmentCreation;
window.updateCreatingEstablishmentIcon = updateCreatingEstablishmentIcon;
window.showEditEstablishmentForm = showEditEstablishmentForm;
window.hideEditEstablishmentForm = hideEditEstablishmentForm;
window.saveEstablishmentChanges = saveEstablishmentChanges;
window.updateEstablishmentIcon = updateEstablishmentIcon;
window.handleDeleteEstablishmentClick = handleDeleteEstablishmentClick;
window.actuallyDeleteEstablishment = actuallyDeleteEstablishment;
window.confirmDeleteEstablishment = confirmDeleteEstablishment;
window.cancelDeleteEstablishment = cancelDeleteEstablishment;
window.saveMarkupData = saveMarkupData;
window.loadMarkupData = loadMarkupData;
window.saveMarkupDataToLocalStorage = saveMarkupDataToLocalStorage;
window.loadMarkupDataFromLocalStorage = loadMarkupDataFromLocalStorage;
window.exportMarkupData = exportMarkupData;
window.clearAllMarkup = clearAllMarkup;
window.finishPolygon = finishPolygon;
window.cancelPolygon = cancelPolygon;
window.showTerritoryMarkupNotification = showTerritoryMarkupNotification;
window.hideTerritoryMarkupNotification = hideTerritoryMarkupNotification;
window.showCapturePopup = showCapturePopup;

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π
function createTestEstablishments() {
    const testEstablishments = [
        {
            id: 'test_1',
            name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ú–æ—Å–∫–≤–∞"',
            type: 'restaurant',
            coords: [55.7558, 37.6176],
            income: 5000,
            captureCost: 10000,
            owner: null
        },
        {
            id: 'test_2',
            name: '–ë–∞—Ä "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"',
            type: 'bar',
            coords: [55.7539, 37.6208],
            income: 3000,
            captureCost: 8000,
            owner: null
        },
        {
            id: 'test_3',
            name: '–ö–∞–∑–∏–Ω–æ "–ê—Ä–±–∞—Ç"',
            type: 'casino',
            coords: [55.7522, 37.5914],
            income: 8000,
            captureCost: 15000,
            owner: null
        },
        {
            id: 'test_4',
            name: '–ù–æ—á–Ω–æ–π –∫–ª—É–± "–¢–≤–µ—Ä—Å–∫–∞—è"',
            type: 'nightclub',
            coords: [55.7616, 37.6094],
            income: 6000,
            captureCost: 12000,
            owner: null
        }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    testEstablishments.forEach(establishment => {
        currentMarkupData.establishments.push(establishment);
        addMarkupEstablishment(establishment);
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    saveMarkupDataToLocalStorage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≤–µ–¥–µ–Ω–∏–π
    if (typeof updateEstablishmentSelector === 'function') {
        updateEstablishmentSelector();
    }
    
    console.log('–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π:', testEstablishments.length);
    showMessage(`–°–æ–∑–¥–∞–Ω–æ ${testEstablishments.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π`, 'success');
}

window.createTestEstablishments = createTestEstablishments;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function forceLoadMarkupData() {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ç–∫–∏...');
    if (window.gangsterMap) {
        loadMarkupDataFromLocalStorage();
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } else {
        console.log('–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function checkMarkupDataStatus() {
    const markupData = localStorage.getItem('gangsters_markup_data');
    console.log('–î–∞–Ω–Ω—ã–µ –≤ localStorage:', markupData ? JSON.parse(markupData) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏:', currentMarkupData);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏:', currentMarkupData.establishments.length);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º
async function forceCloudSync() {
    console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º...');
    if (window.githubSyncService && window.githubSyncService.githubToken) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            saveMarkupDataToLocalStorage();
            
            // –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
            await window.githubSyncService.syncToGist();
            console.log('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (typeof showMessage === 'function') {
                showMessage('–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º', 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
            if (typeof showMessage === 'function') {
                showMessage('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º', 'error');
            }
        }
    } else {
        console.log('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ GitHub –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        if (typeof showMessage === 'function') {
            showMessage('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ GitHub –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
function ensureDataLoaded() {
    if (currentMarkupData.establishments.length === 0) {
        console.log('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º...');
        loadMarkupDataFromLocalStorage();
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('click', function() {
    setTimeout(ensureDataLoaded, 100);
});

document.addEventListener('keydown', function() {
    setTimeout(ensureDataLoaded, 100);
});

window.forceLoadMarkupData = forceLoadMarkupData;
window.checkMarkupDataStatus = checkMarkupDataStatus;
window.forceCloudSync = forceCloudSync;
window.ensureDataLoaded = ensureDataLoaded;
window.calculateDistance = calculateDistance;
window.attemptCapture = attemptCapture;
window.attemptBuy = attemptBuy;
window.updateAllEstablishmentIcons = updateAllEstablishmentIcons;
window.getIconSizeForZoom = getIconSizeForZoom;
window.updateEstablishmentVisualization = updateEstablishmentVisualization;
window.addOwnerLabelToTerritory = addOwnerLabelToTerritory;
window.attemptSellEstablishment = attemptSellEstablishment;
window.showEstablishmentInfo = showEstablishmentInfo;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è
function testOwnershipSaving() {
    console.log('=== –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í–õ–ê–î–ï–ù–ò–Ø ===');
    console.log('–¢–µ–∫—É—â–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:', currentMarkupData.establishments);
    console.log('–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏:', currentMarkupData.establishments.filter(e => e.owner));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const savedData = localStorage.getItem('gangsters_markup_data');
    if (savedData) {
        const data = JSON.parse(savedData);
        console.log('–î–∞–Ω–Ω—ã–µ –≤ localStorage:', data);
        console.log('–ó–∞–≤–µ–¥–µ–Ω–∏—è —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –≤ localStorage:', data.establishments.filter(e => e.owner));
    } else {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = typeof currentUser === 'function' ? currentUser() : currentUser;
    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
}

window.testOwnershipSaving = testOwnershipSaving;
